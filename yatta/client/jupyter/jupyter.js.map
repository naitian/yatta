{"version":3,"file":"jupyter.js","sources":["../node_modules/svelte/src/runtime/internal/utils.js","../node_modules/svelte/src/runtime/internal/dom.js","../node_modules/svelte/src/runtime/internal/lifecycle.js","../node_modules/svelte/src/runtime/internal/scheduler.js","../node_modules/svelte/src/runtime/internal/transitions.js","../node_modules/svelte/src/runtime/internal/Component.js","../node_modules/svelte/src/shared/version.js","../node_modules/svelte/src/runtime/internal/disclose-version/index.js","../node_modules/svelte/src/runtime/store/index.js","../src/lib/stores.js","../node_modules/svelte-routing/src/utils.js","../node_modules/svelte-routing/src/history.js","../src/lib/model.js","../src/lib/components/task.svelte","../src/lib/pages/annotate.svelte","../src/jupyter.js"],"sourcesContent":["/** @returns {void} */\nexport function noop() {}\n\nexport const identity = (x) => x;\n\n/**\n * @template T\n * @template S\n * @param {T} tar\n * @param {S} src\n * @returns {T & S}\n */\nexport function assign(tar, src) {\n\t// @ts-ignore\n\tfor (const k in src) tar[k] = src[k];\n\treturn /** @type {T & S} */ (tar);\n}\n\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\n/**\n * @param {any} value\n * @returns {value is PromiseLike<any>}\n */\nexport function is_promise(value) {\n\treturn (\n\t\t!!value &&\n\t\t(typeof value === 'object' || typeof value === 'function') &&\n\t\ttypeof (/** @type {any} */ (value).then) === 'function'\n\t);\n}\n\n/** @returns {void} */\nexport function add_location(element, file, line, column, char) {\n\telement.__svelte_meta = {\n\t\tloc: { file, line, column, char }\n\t};\n}\n\nexport function run(fn) {\n\treturn fn();\n}\n\nexport function blank_object() {\n\treturn Object.create(null);\n}\n\n/**\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function run_all(fns) {\n\tfns.forEach(run);\n}\n\n/**\n * @param {any} thing\n * @returns {thing is Function}\n */\nexport function is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\n/** @returns {boolean} */\nexport function safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';\n}\n\nlet src_url_equal_anchor;\n\n/**\n * @param {string} element_src\n * @param {string} url\n * @returns {boolean}\n */\nexport function src_url_equal(element_src, url) {\n\tif (element_src === url) return true;\n\tif (!src_url_equal_anchor) {\n\t\tsrc_url_equal_anchor = document.createElement('a');\n\t}\n\t// This is actually faster than doing URL(..).href\n\tsrc_url_equal_anchor.href = url;\n\treturn element_src === src_url_equal_anchor.href;\n}\n\n/** @param {string} srcset */\nfunction split_srcset(srcset) {\n\treturn srcset.split(',').map((src) => src.trim().split(' ').filter(Boolean));\n}\n\n/**\n * @param {HTMLSourceElement | HTMLImageElement} element_srcset\n * @param {string | undefined | null} srcset\n * @returns {boolean}\n */\nexport function srcset_url_equal(element_srcset, srcset) {\n\tconst element_urls = split_srcset(element_srcset.srcset);\n\tconst urls = split_srcset(srcset || '');\n\n\treturn (\n\t\turls.length === element_urls.length &&\n\t\turls.every(\n\t\t\t([url, width], i) =>\n\t\t\t\twidth === element_urls[i][1] &&\n\t\t\t\t// We need to test both ways because Vite will create an a full URL with\n\t\t\t\t// `new URL(asset, import.meta.url).href` for the client when `base: './'`, and the\n\t\t\t\t// relative URLs inside srcset are not automatically resolved to absolute URLs by\n\t\t\t\t// browsers (in contrast to img.src). This means both SSR and DOM code could\n\t\t\t\t// contain relative or absolute URLs.\n\t\t\t\t(src_url_equal(element_urls[i][0], url) || src_url_equal(url, element_urls[i][0]))\n\t\t)\n\t);\n}\n\n/** @returns {boolean} */\nexport function not_equal(a, b) {\n\treturn a != a ? b == b : a !== b;\n}\n\n/** @returns {boolean} */\nexport function is_empty(obj) {\n\treturn Object.keys(obj).length === 0;\n}\n\n/** @returns {void} */\nexport function validate_store(store, name) {\n\tif (store != null && typeof store.subscribe !== 'function') {\n\t\tthrow new Error(`'${name}' is not a store with a 'subscribe' method`);\n\t}\n}\n\nexport function subscribe(store, ...callbacks) {\n\tif (store == null) {\n\t\tfor (const callback of callbacks) {\n\t\t\tcallback(undefined);\n\t\t}\n\t\treturn noop;\n\t}\n\tconst unsub = store.subscribe(...callbacks);\n\treturn unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\n\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n *\n * https://svelte.dev/docs/svelte-store#get\n * @template T\n * @param {import('../store/public.js').Readable<T>} store\n * @returns {T}\n */\nexport function get_store_value(store) {\n\tlet value;\n\tsubscribe(store, (_) => (value = _))();\n\treturn value;\n}\n\n/** @returns {void} */\nexport function component_subscribe(component, store, callback) {\n\tcomponent.$$.on_destroy.push(subscribe(store, callback));\n}\n\nexport function create_slot(definition, ctx, $$scope, fn) {\n\tif (definition) {\n\t\tconst slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n\t\treturn definition[0](slot_ctx);\n\t}\n}\n\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n\treturn definition[1] && fn ? assign($$scope.ctx.slice(), definition[1](fn(ctx))) : $$scope.ctx;\n}\n\nexport function get_slot_changes(definition, $$scope, dirty, fn) {\n\tif (definition[2] && fn) {\n\t\tconst lets = definition[2](fn(dirty));\n\t\tif ($$scope.dirty === undefined) {\n\t\t\treturn lets;\n\t\t}\n\t\tif (typeof lets === 'object') {\n\t\t\tconst merged = [];\n\t\t\tconst len = Math.max($$scope.dirty.length, lets.length);\n\t\t\tfor (let i = 0; i < len; i += 1) {\n\t\t\t\tmerged[i] = $$scope.dirty[i] | lets[i];\n\t\t\t}\n\t\t\treturn merged;\n\t\t}\n\t\treturn $$scope.dirty | lets;\n\t}\n\treturn $$scope.dirty;\n}\n\n/** @returns {void} */\nexport function update_slot_base(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tslot_changes,\n\tget_slot_context_fn\n) {\n\tif (slot_changes) {\n\t\tconst slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n\t\tslot.p(slot_context, slot_changes);\n\t}\n}\n\n/** @returns {void} */\nexport function update_slot(\n\tslot,\n\tslot_definition,\n\tctx,\n\t$$scope,\n\tdirty,\n\tget_slot_changes_fn,\n\tget_slot_context_fn\n) {\n\tconst slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n\tupdate_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\n\n/** @returns {any[] | -1} */\nexport function get_all_dirty_from_scope($$scope) {\n\tif ($$scope.ctx.length > 32) {\n\t\tconst dirty = [];\n\t\tconst length = $$scope.ctx.length / 32;\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tdirty[i] = -1;\n\t\t}\n\t\treturn dirty;\n\t}\n\treturn -1;\n}\n\n/** @returns {{}} */\nexport function exclude_internal_props(props) {\n\tconst result = {};\n\tfor (const k in props) if (k[0] !== '$') result[k] = props[k];\n\treturn result;\n}\n\n/** @returns {{}} */\nexport function compute_rest_props(props, keys) {\n\tconst rest = {};\n\tkeys = new Set(keys);\n\tfor (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k];\n\treturn rest;\n}\n\n/** @returns {{}} */\nexport function compute_slots(slots) {\n\tconst result = {};\n\tfor (const key in slots) {\n\t\tresult[key] = true;\n\t}\n\treturn result;\n}\n\n/** @returns {(this: any, ...args: any[]) => void} */\nexport function once(fn) {\n\tlet ran = false;\n\treturn function (...args) {\n\t\tif (ran) return;\n\t\tran = true;\n\t\tfn.call(this, ...args);\n\t};\n}\n\nexport function null_to_empty(value) {\n\treturn value == null ? '' : value;\n}\n\nexport function set_store_value(store, ret, value) {\n\tstore.set(value);\n\treturn ret;\n}\n\nexport const has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport function action_destroyer(action_result) {\n\treturn action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\n/** @param {number | string} value\n * @returns {[number, string]}\n */\nexport function split_css_unit(value) {\n\tconst split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n\treturn split ? [parseFloat(split[1]), split[2] || 'px'] : [/** @type {number} */ (value), 'px'];\n}\n\nexport const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n","import { contenteditable_truthy_values, has_prop } from './utils.js';\n\nimport { ResizeObserverSingleton } from './ResizeObserverSingleton.js';\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\n\n/**\n * @returns {void}\n */\nexport function start_hydrating() {\n\tis_hydrating = true;\n}\n\n/**\n * @returns {void}\n */\nexport function end_hydrating() {\n\tis_hydrating = false;\n}\n\n/**\n * @param {number} low\n * @param {number} high\n * @param {(index: number) => number} key\n * @param {number} value\n * @returns {number}\n */\nfunction upper_bound(low, high, key, value) {\n\t// Return first index of value larger than input value in the range [low, high)\n\twhile (low < high) {\n\t\tconst mid = low + ((high - low) >> 1);\n\t\tif (key(mid) <= value) {\n\t\t\tlow = mid + 1;\n\t\t} else {\n\t\t\thigh = mid;\n\t\t}\n\t}\n\treturn low;\n}\n\n/**\n * @param {NodeEx} target\n * @returns {void}\n */\nfunction init_hydrate(target) {\n\tif (target.hydrate_init) return;\n\ttarget.hydrate_init = true;\n\t// We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n\n\tlet children = /** @type {ArrayLike<NodeEx2>} */ (target.childNodes);\n\t// If target is <head>, there may be children without claim_order\n\tif (target.nodeName === 'HEAD') {\n\t\tconst my_children = [];\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tconst node = children[i];\n\t\t\tif (node.claim_order !== undefined) {\n\t\t\t\tmy_children.push(node);\n\t\t\t}\n\t\t}\n\t\tchildren = my_children;\n\t}\n\t/*\n\t * Reorder claimed children optimally.\n\t * We can reorder claimed children optimally by finding the longest subsequence of\n\t * nodes that are already claimed in order and only moving the rest. The longest\n\t * subsequence of nodes that are claimed in order can be found by\n\t * computing the longest increasing subsequence of .claim_order values.\n\t *\n\t * This algorithm is optimal in generating the least amount of reorder operations\n\t * possible.\n\t *\n\t * Proof:\n\t * We know that, given a set of reordering operations, the nodes that do not move\n\t * always form an increasing subsequence, since they do not move among each other\n\t * meaning that they must be already ordered among each other. Thus, the maximal\n\t * set of nodes that do not move form a longest increasing subsequence.\n\t */\n\t// Compute longest increasing subsequence\n\t// m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n\tconst m = new Int32Array(children.length + 1);\n\t// Predecessor indices + 1\n\tconst p = new Int32Array(children.length);\n\tm[0] = -1;\n\tlet longest = 0;\n\tfor (let i = 0; i < children.length; i++) {\n\t\tconst current = children[i].claim_order;\n\t\t// Find the largest subsequence length such that it ends in a value less than our current value\n\t\t// upper_bound returns first greater value, so we subtract one\n\t\t// with fast path for when we are on the current longest subsequence\n\t\tconst seq_len =\n\t\t\t(longest > 0 && children[m[longest]].claim_order <= current\n\t\t\t\t? longest + 1\n\t\t\t\t: upper_bound(1, longest, (idx) => children[m[idx]].claim_order, current)) - 1;\n\t\tp[i] = m[seq_len] + 1;\n\t\tconst new_len = seq_len + 1;\n\t\t// We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n\t\tm[new_len] = i;\n\t\tlongest = Math.max(new_len, longest);\n\t}\n\t// The longest increasing subsequence of nodes (initially reversed)\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst lis = [];\n\t// The rest of the nodes, nodes that will be moved\n\n\t/**\n\t * @type {NodeEx2[]}\n\t */\n\tconst to_move = [];\n\tlet last = children.length - 1;\n\tfor (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n\t\tlis.push(children[cur - 1]);\n\t\tfor (; last >= cur; last--) {\n\t\t\tto_move.push(children[last]);\n\t\t}\n\t\tlast--;\n\t}\n\tfor (; last >= 0; last--) {\n\t\tto_move.push(children[last]);\n\t}\n\tlis.reverse();\n\t// We sort the nodes being moved to guarantee that their insertion order matches the claim order\n\tto_move.sort((a, b) => a.claim_order - b.claim_order);\n\t// Finally, we move the nodes\n\tfor (let i = 0, j = 0; i < to_move.length; i++) {\n\t\twhile (j < lis.length && to_move[i].claim_order >= lis[j].claim_order) {\n\t\t\tj++;\n\t\t}\n\t\tconst anchor = j < lis.length ? lis[j] : null;\n\t\ttarget.insertBefore(to_move[i], anchor);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @returns {void}\n */\nexport function append(target, node) {\n\ttarget.appendChild(node);\n}\n\n/**\n * @param {Node} target\n * @param {string} style_sheet_id\n * @param {string} styles\n * @returns {void}\n */\nexport function append_styles(target, style_sheet_id, styles) {\n\tconst append_styles_to = get_root_for_style(target);\n\tif (!append_styles_to.getElementById(style_sheet_id)) {\n\t\tconst style = element('style');\n\t\tstyle.id = style_sheet_id;\n\t\tstyle.textContent = styles;\n\t\tappend_stylesheet(append_styles_to, style);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {ShadowRoot | Document}\n */\nexport function get_root_for_style(node) {\n\tif (!node) return document;\n\tconst root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n\tif (root && /** @type {ShadowRoot} */ (root).host) {\n\t\treturn /** @type {ShadowRoot} */ (root);\n\t}\n\treturn node.ownerDocument;\n}\n\n/**\n * @param {Node} node\n * @returns {CSSStyleSheet}\n */\nexport function append_empty_stylesheet(node) {\n\tconst style_element = element('style');\n\t// For transitions to work without 'style-src: unsafe-inline' Content Security Policy,\n\t// these empty tags need to be allowed with a hash as a workaround until we move to the Web Animations API.\n\t// Using the hash for the empty string (for an empty tag) works in all browsers except Safari.\n\t// So as a workaround for the workaround, when we append empty style tags we set their content to /* empty */.\n\t// The hash 'sha256-9OlNO0DNEeaVzHL4RZwCLsBHA8WBQ8toBp/4F5XV2nc=' will then work even in Safari.\n\tstyle_element.textContent = '/* empty */';\n\tappend_stylesheet(get_root_for_style(node), style_element);\n\treturn style_element.sheet;\n}\n\n/**\n * @param {ShadowRoot | Document} node\n * @param {HTMLStyleElement} style\n * @returns {CSSStyleSheet}\n */\nfunction append_stylesheet(node, style) {\n\tappend(/** @type {Document} */ (node).head || node, style);\n\treturn style.sheet;\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @returns {void}\n */\nexport function append_hydration(target, node) {\n\tif (is_hydrating) {\n\t\tinit_hydrate(target);\n\t\tif (\n\t\t\ttarget.actual_end_child === undefined ||\n\t\t\t(target.actual_end_child !== null && target.actual_end_child.parentNode !== target)\n\t\t) {\n\t\t\ttarget.actual_end_child = target.firstChild;\n\t\t}\n\t\t// Skip nodes of undefined ordering\n\t\twhile (target.actual_end_child !== null && target.actual_end_child.claim_order === undefined) {\n\t\t\ttarget.actual_end_child = target.actual_end_child.nextSibling;\n\t\t}\n\t\tif (node !== target.actual_end_child) {\n\t\t\t// We only insert if the ordering of this node should be modified or the parent node is not target\n\t\t\tif (node.claim_order !== undefined || node.parentNode !== target) {\n\t\t\t\ttarget.insertBefore(node, target.actual_end_child);\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.actual_end_child = node.nextSibling;\n\t\t}\n\t} else if (node.parentNode !== target || node.nextSibling !== null) {\n\t\ttarget.appendChild(node);\n\t}\n}\n\n/**\n * @param {Node} target\n * @param {Node} node\n * @param {Node} [anchor]\n * @returns {void}\n */\nexport function insert(target, node, anchor) {\n\ttarget.insertBefore(node, anchor || null);\n}\n\n/**\n * @param {NodeEx} target\n * @param {NodeEx} node\n * @param {NodeEx} [anchor]\n * @returns {void}\n */\nexport function insert_hydration(target, node, anchor) {\n\tif (is_hydrating && !anchor) {\n\t\tappend_hydration(target, node);\n\t} else if (node.parentNode !== target || node.nextSibling != anchor) {\n\t\ttarget.insertBefore(node, anchor || null);\n\t}\n}\n\n/**\n * @param {Node} node\n * @returns {void}\n */\nexport function detach(node) {\n\tif (node.parentNode) {\n\t\tnode.parentNode.removeChild(node);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function destroy_each(iterations, detaching) {\n\tfor (let i = 0; i < iterations.length; i += 1) {\n\t\tif (iterations[i]) iterations[i].d(detaching);\n\t}\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element(name) {\n\treturn document.createElement(name);\n}\n\n/**\n * @template {keyof HTMLElementTagNameMap} K\n * @param {K} name\n * @param {string} is\n * @returns {HTMLElementTagNameMap[K]}\n */\nexport function element_is(name, is) {\n\treturn document.createElement(name, { is });\n}\n\n/**\n * @template T\n * @template {keyof T} K\n * @param {T} obj\n * @param {K[]} exclude\n * @returns {Pick<T, Exclude<keyof T, K>>}\n */\nexport function object_without_properties(obj, exclude) {\n\tconst target = /** @type {Pick<T, Exclude<keyof T, K>>} */ ({});\n\tfor (const k in obj) {\n\t\tif (\n\t\t\thas_prop(obj, k) &&\n\t\t\t// @ts-ignore\n\t\t\texclude.indexOf(k) === -1\n\t\t) {\n\t\t\t// @ts-ignore\n\t\t\ttarget[k] = obj[k];\n\t\t}\n\t}\n\treturn target;\n}\n\n/**\n * @template {keyof SVGElementTagNameMap} K\n * @param {K} name\n * @returns {SVGElement}\n */\nexport function svg_element(name) {\n\treturn document.createElementNS('http://www.w3.org/2000/svg', name);\n}\n\n/**\n * @param {string} data\n * @returns {Text}\n */\nexport function text(data) {\n\treturn document.createTextNode(data);\n}\n\n/**\n * @returns {Text} */\nexport function space() {\n\treturn text(' ');\n}\n\n/**\n * @returns {Text} */\nexport function empty() {\n\treturn text('');\n}\n\n/**\n * @param {string} content\n * @returns {Comment}\n */\nexport function comment(content) {\n\treturn document.createComment(content);\n}\n\n/**\n * @param {EventTarget} node\n * @param {string} event\n * @param {EventListenerOrEventListenerObject} handler\n * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]\n * @returns {() => void}\n */\nexport function listen(node, event, handler, options) {\n\tnode.addEventListener(event, handler, options);\n\treturn () => node.removeEventListener(event, handler, options);\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function prevent_default(fn) {\n\treturn function (event) {\n\t\tevent.preventDefault();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopPropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => any} */\nexport function stop_immediate_propagation(fn) {\n\treturn function (event) {\n\t\tevent.stopImmediatePropagation();\n\t\t// @ts-ignore\n\t\treturn fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function self(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.target === this) fn.call(this, event);\n\t};\n}\n\n/**\n * @returns {(event: any) => void} */\nexport function trusted(fn) {\n\treturn function (event) {\n\t\t// @ts-ignore\n\t\tif (event.isTrusted) fn.call(this, event);\n\t};\n}\n\n/**\n * @param {Element} node\n * @param {string} attribute\n * @param {string} [value]\n * @returns {void}\n */\nexport function attr(node, attribute, value) {\n\tif (value == null) node.removeAttribute(attribute);\n\telse if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_attributes(node, attributes) {\n\t// @ts-ignore\n\tconst descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n\tfor (const key in attributes) {\n\t\tif (attributes[key] == null) {\n\t\t\tnode.removeAttribute(key);\n\t\t} else if (key === 'style') {\n\t\t\tnode.style.cssText = attributes[key];\n\t\t} else if (key === '__value') {\n\t\t\t/** @type {any} */ (node).value = node[key] = attributes[key];\n\t\t} else if (\n\t\t\tdescriptors[key] &&\n\t\t\tdescriptors[key].set &&\n\t\t\talways_set_through_set_attribute.indexOf(key) === -1\n\t\t) {\n\t\t\tnode[key] = attributes[key];\n\t\t} else {\n\t\t\tattr(node, key, attributes[key]);\n\t\t}\n\t}\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {{ [x: string]: string }} attributes\n * @returns {void}\n */\nexport function set_svg_attributes(node, attributes) {\n\tfor (const key in attributes) {\n\t\tattr(node, key, attributes[key]);\n\t}\n}\n\n/**\n * @param {Record<string, unknown>} data_map\n * @returns {void}\n */\nexport function set_custom_element_data_map(node, data_map) {\n\tObject.keys(data_map).forEach((key) => {\n\t\tset_custom_element_data(node, key, data_map[key]);\n\t});\n}\n\n/**\n * @returns {void} */\nexport function set_custom_element_data(node, prop, value) {\n\tconst lower = prop.toLowerCase(); // for backwards compatibility with existing behavior we do lowercase first\n\tif (lower in node) {\n\t\tnode[lower] = typeof node[lower] === 'boolean' && value === '' ? true : value;\n\t} else if (prop in node) {\n\t\tnode[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n\t} else {\n\t\tattr(node, prop, value);\n\t}\n}\n\n/**\n * @param {string} tag\n */\nexport function set_dynamic_element_data(tag) {\n\treturn /-/.test(tag) ? set_custom_element_data_map : set_attributes;\n}\n\n/**\n * @returns {void}\n */\nexport function xlink_attr(node, attribute, value) {\n\tnode.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\n\n/**\n * @param {HTMLElement} node\n * @returns {string}\n */\nexport function get_svelte_dataset(node) {\n\treturn node.dataset.svelteH;\n}\n\n/**\n * @returns {unknown[]} */\nexport function get_binding_group_value(group, __value, checked) {\n\tconst value = new Set();\n\tfor (let i = 0; i < group.length; i += 1) {\n\t\tif (group[i].checked) value.add(group[i].__value);\n\t}\n\tif (!checked) {\n\t\tvalue.delete(__value);\n\t}\n\treturn Array.from(value);\n}\n\n/**\n * @param {HTMLInputElement[]} group\n * @returns {{ p(...inputs: HTMLInputElement[]): void; r(): void; }}\n */\nexport function init_binding_group(group) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\treturn {\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\t_inputs.forEach((input) => group.push(input));\n\t\t},\n\t\t/* remove */ r() {\n\t\t\t_inputs.forEach((input) => group.splice(group.indexOf(input), 1));\n\t\t}\n\t};\n}\n\n/**\n * @param {number[]} indexes\n * @returns {{ u(new_indexes: number[]): void; p(...inputs: HTMLInputElement[]): void; r: () => void; }}\n */\nexport function init_binding_group_dynamic(group, indexes) {\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _group = get_binding_group(group);\n\n\t/**\n\t * @type {HTMLInputElement[]} */\n\tlet _inputs;\n\n\tfunction get_binding_group(group) {\n\t\tfor (let i = 0; i < indexes.length; i++) {\n\t\t\tgroup = group[indexes[i]] = group[indexes[i]] || [];\n\t\t}\n\t\treturn group;\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction push() {\n\t\t_inputs.forEach((input) => _group.push(input));\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction remove() {\n\t\t_inputs.forEach((input) => _group.splice(_group.indexOf(input), 1));\n\t}\n\treturn {\n\t\t/* update */ u(new_indexes) {\n\t\t\tindexes = new_indexes;\n\t\t\tconst new_group = get_binding_group(group);\n\t\t\tif (new_group !== _group) {\n\t\t\t\tremove();\n\t\t\t\t_group = new_group;\n\t\t\t\tpush();\n\t\t\t}\n\t\t},\n\t\t/* push */ p(...inputs) {\n\t\t\t_inputs = inputs;\n\t\t\tpush();\n\t\t},\n\t\t/* remove */ r: remove\n\t};\n}\n\n/** @returns {number} */\nexport function to_number(value) {\n\treturn value === '' ? null : +value;\n}\n\n/** @returns {any[]} */\nexport function time_ranges_to_array(ranges) {\n\tconst array = [];\n\tfor (let i = 0; i < ranges.length; i += 1) {\n\t\tarray.push({ start: ranges.start(i), end: ranges.end(i) });\n\t}\n\treturn array;\n}\n\n/**\n * @param {Element} element\n * @returns {ChildNode[]}\n */\nexport function children(element) {\n\treturn Array.from(element.childNodes);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {void}\n */\nfunction init_claim_info(nodes) {\n\tif (nodes.claim_info === undefined) {\n\t\tnodes.claim_info = { last_index: 0, total_claimed: 0 };\n\t}\n}\n\n/**\n * @template {ChildNodeEx} R\n * @param {ChildNodeArray} nodes\n * @param {(node: ChildNodeEx) => node is R} predicate\n * @param {(node: ChildNodeEx) => ChildNodeEx | undefined} process_node\n * @param {() => R} create_node\n * @param {boolean} dont_update_last_index\n * @returns {R}\n */\nfunction claim_node(nodes, predicate, process_node, create_node, dont_update_last_index = false) {\n\t// Try to find nodes in an order such that we lengthen the longest increasing subsequence\n\tinit_claim_info(nodes);\n\tconst result_node = (() => {\n\t\t// We first try to find an element after the previous one\n\t\tfor (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// Otherwise, we try to find one before\n\t\t// We iterate in reverse so that we don't go too far back\n\t\tfor (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n\t\t\tconst node = nodes[i];\n\t\t\tif (predicate(node)) {\n\t\t\t\tconst replacement = process_node(node);\n\t\t\t\tif (replacement === undefined) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t} else {\n\t\t\t\t\tnodes[i] = replacement;\n\t\t\t\t}\n\t\t\t\tif (!dont_update_last_index) {\n\t\t\t\t\tnodes.claim_info.last_index = i;\n\t\t\t\t} else if (replacement === undefined) {\n\t\t\t\t\t// Since we spliced before the last_index, we decrease it\n\t\t\t\t\tnodes.claim_info.last_index--;\n\t\t\t\t}\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\t// If we can't find any matching node, we create a new one\n\t\treturn create_node();\n\t})();\n\tresult_node.claim_order = nodes.claim_info.total_claimed;\n\tnodes.claim_info.total_claimed += 1;\n\treturn result_node;\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @param {(name: string) => Element | SVGElement} create_element\n * @returns {Element | SVGElement}\n */\nfunction claim_element_base(nodes, name, attributes, create_element) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Element | SVGElement} */\n\t\t(node) => node.nodeName === name,\n\t\t/** @param {Element} node */\n\t\t(node) => {\n\t\t\tconst remove = [];\n\t\t\tfor (let j = 0; j < node.attributes.length; j++) {\n\t\t\t\tconst attribute = node.attributes[j];\n\t\t\t\tif (!attributes[attribute.name]) {\n\t\t\t\t\tremove.push(attribute.name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tremove.forEach((v) => node.removeAttribute(v));\n\t\t\treturn undefined;\n\t\t},\n\t\t() => create_element(name)\n\t);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @param {string} name\n * @param {{ [key: string]: boolean }} attributes\n * @returns {Element | SVGElement}\n */\nexport function claim_svg_element(nodes, name, attributes) {\n\treturn claim_element_base(nodes, name, attributes, svg_element);\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Text}\n */\nexport function claim_text(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Text} */\n\t\t(node) => node.nodeType === 3,\n\t\t/** @param {Text} node */\n\t\t(node) => {\n\t\t\tconst data_str = '' + data;\n\t\t\tif (node.data.startsWith(data_str)) {\n\t\t\t\tif (node.data.length !== data_str.length) {\n\t\t\t\t\treturn node.splitText(data_str.length);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnode.data = data_str;\n\t\t\t}\n\t\t},\n\t\t() => text(data),\n\t\ttrue // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n\t);\n}\n\n/**\n * @returns {Text} */\nexport function claim_space(nodes) {\n\treturn claim_text(nodes, ' ');\n}\n\n/**\n * @param {ChildNodeArray} nodes\n * @returns {Comment}\n */\nexport function claim_comment(nodes, data) {\n\treturn claim_node(\n\t\tnodes,\n\t\t/** @returns {node is Comment} */\n\t\t(node) => node.nodeType === 8,\n\t\t/** @param {Comment} node */\n\t\t(node) => {\n\t\t\tnode.data = '' + data;\n\t\t\treturn undefined;\n\t\t},\n\t\t() => comment(data),\n\t\ttrue\n\t);\n}\n\nfunction get_comment_idx(nodes, text, start) {\n\tfor (let i = start; i < nodes.length; i += 1) {\n\t\tconst node = nodes[i];\n\t\tif (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/**\n * @param {boolean} is_svg\n * @returns {HtmlTagHydration}\n */\nexport function claim_html_tag(nodes, is_svg) {\n\t// find html opening tag\n\tconst start_index = get_comment_idx(nodes, 'HTML_TAG_START', 0);\n\tconst end_index = get_comment_idx(nodes, 'HTML_TAG_END', start_index + 1);\n\tif (start_index === -1 || end_index === -1) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\n\tinit_claim_info(nodes);\n\tconst html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n\tdetach(html_tag_nodes[0]);\n\tdetach(html_tag_nodes[html_tag_nodes.length - 1]);\n\tconst claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n\tif (claimed_nodes.length === 0) {\n\t\treturn new HtmlTagHydration(is_svg);\n\t}\n\tfor (const n of claimed_nodes) {\n\t\tn.claim_order = nodes.claim_info.total_claimed;\n\t\tnodes.claim_info.total_claimed += 1;\n\t}\n\treturn new HtmlTagHydration(is_svg, claimed_nodes);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data(text, data) {\n\tdata = '' + data;\n\tif (text.data === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @returns {void}\n */\nexport function set_data_contenteditable(text, data) {\n\tdata = '' + data;\n\tif (text.wholeText === data) return;\n\ttext.data = /** @type {string} */ (data);\n}\n\n/**\n * @param {Text} text\n * @param {unknown} data\n * @param {string} attr_value\n * @returns {void}\n */\nexport function set_data_maybe_contenteditable(text, data, attr_value) {\n\tif (~contenteditable_truthy_values.indexOf(attr_value)) {\n\t\tset_data_contenteditable(text, data);\n\t} else {\n\t\tset_data(text, data);\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_input_value(input, value) {\n\tinput.value = value == null ? '' : value;\n}\n\n/**\n * @returns {void} */\nexport function set_input_type(input, type) {\n\ttry {\n\t\tinput.type = type;\n\t} catch (e) {\n\t\t// do nothing\n\t}\n}\n\n/**\n * @returns {void} */\nexport function set_style(node, key, value, important) {\n\tif (value == null) {\n\t\tnode.style.removeProperty(key);\n\t} else {\n\t\tnode.style.setProperty(key, value, important ? 'important' : '');\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_option(select, value, mounting) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\tif (option.__value === value) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (!mounting || value !== undefined) {\n\t\tselect.selectedIndex = -1; // no option should be selected\n\t}\n}\n\n/**\n * @returns {void} */\nexport function select_options(select, value) {\n\tfor (let i = 0; i < select.options.length; i += 1) {\n\t\tconst option = select.options[i];\n\t\toption.selected = ~value.indexOf(option.__value);\n\t}\n}\n\nexport function select_value(select) {\n\tconst selected_option = select.querySelector(':checked');\n\treturn selected_option && selected_option.__value;\n}\n\nexport function select_multiple_value(select) {\n\treturn [].map.call(select.querySelectorAll(':checked'), (option) => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\n\n/**\n * @type {boolean} */\nlet crossorigin;\n\n/**\n * @returns {boolean} */\nexport function is_crossorigin() {\n\tif (crossorigin === undefined) {\n\t\tcrossorigin = false;\n\t\ttry {\n\t\t\tif (typeof window !== 'undefined' && window.parent) {\n\t\t\t\tvoid window.parent.document;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tcrossorigin = true;\n\t\t}\n\t}\n\treturn crossorigin;\n}\n\n/**\n * @param {HTMLElement} node\n * @param {() => void} fn\n * @returns {() => void}\n */\nexport function add_iframe_resize_listener(node, fn) {\n\tconst computed_style = getComputedStyle(node);\n\tif (computed_style.position === 'static') {\n\t\tnode.style.position = 'relative';\n\t}\n\tconst iframe = element('iframe');\n\tiframe.setAttribute(\n\t\t'style',\n\t\t'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n\t\t\t'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;'\n\t);\n\tiframe.setAttribute('aria-hidden', 'true');\n\tiframe.tabIndex = -1;\n\tconst crossorigin = is_crossorigin();\n\n\t/**\n\t * @type {() => void}\n\t */\n\tlet unsubscribe;\n\tif (crossorigin) {\n\t\tiframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n\t\tunsubscribe = listen(\n\t\t\twindow,\n\t\t\t'message',\n\t\t\t/** @param {MessageEvent} event */ (event) => {\n\t\t\t\tif (event.source === iframe.contentWindow) fn();\n\t\t\t}\n\t\t);\n\t} else {\n\t\tiframe.src = 'about:blank';\n\t\tiframe.onload = () => {\n\t\t\tunsubscribe = listen(iframe.contentWindow, 'resize', fn);\n\t\t\t// make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n\t\t\t// see https://github.com/sveltejs/svelte/issues/4233\n\t\t\tfn();\n\t\t};\n\t}\n\tappend(node, iframe);\n\treturn () => {\n\t\tif (crossorigin) {\n\t\t\tunsubscribe();\n\t\t} else if (unsubscribe && iframe.contentWindow) {\n\t\t\tunsubscribe();\n\t\t}\n\t\tdetach(iframe);\n\t};\n}\nexport const resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'content-box'\n});\nexport const resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({\n\tbox: 'border-box'\n});\nexport const resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton(\n\t{ box: 'device-pixel-content-box' }\n);\nexport { ResizeObserverSingleton };\n\n/**\n * @returns {void} */\nexport function toggle_class(element, name, toggle) {\n\t// The `!!` is required because an `undefined` flag means flipping the current state.\n\telement.classList.toggle(name, !!toggle);\n}\n\n/**\n * @template T\n * @param {string} type\n * @param {T} [detail]\n * @param {{ bubbles?: boolean, cancelable?: boolean }} [options]\n * @returns {CustomEvent<T>}\n */\nexport function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n\treturn new CustomEvent(type, { detail, bubbles, cancelable });\n}\n\n/**\n * @param {string} selector\n * @param {HTMLElement} parent\n * @returns {ChildNodeArray}\n */\nexport function query_selector_all(selector, parent = document.body) {\n\treturn Array.from(parent.querySelectorAll(selector));\n}\n\n/**\n * @param {string} nodeId\n * @param {HTMLElement} head\n * @returns {any[]}\n */\nexport function head_selector(nodeId, head) {\n\tconst result = [];\n\tlet started = 0;\n\tfor (const node of head.childNodes) {\n\t\tif (node.nodeType === 8 /* comment node */) {\n\t\t\tconst comment = node.textContent.trim();\n\t\t\tif (comment === `HEAD_${nodeId}_END`) {\n\t\t\t\tstarted -= 1;\n\t\t\t\tresult.push(node);\n\t\t\t} else if (comment === `HEAD_${nodeId}_START`) {\n\t\t\t\tstarted += 1;\n\t\t\t\tresult.push(node);\n\t\t\t}\n\t\t} else if (started > 0) {\n\t\t\tresult.push(node);\n\t\t}\n\t}\n\treturn result;\n}\n/** */\nexport class HtmlTag {\n\t/**\n\t * @private\n\t * @default false\n\t */\n\tis_svg = false;\n\t/** parent for creating node */\n\te = undefined;\n\t/** html tag nodes */\n\tn = undefined;\n\t/** target */\n\tt = undefined;\n\t/** anchor */\n\ta = undefined;\n\tconstructor(is_svg = false) {\n\t\tthis.is_svg = is_svg;\n\t\tthis.e = this.n = null;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tthis.h(html);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @param {HTMLElement | SVGElement} target\n\t * @param {HTMLElement | SVGElement} anchor\n\t * @returns {void}\n\t */\n\tm(html, target, anchor = null) {\n\t\tif (!this.e) {\n\t\t\tif (this.is_svg)\n\t\t\t\tthis.e = svg_element(/** @type {keyof SVGElementTagNameMap} */ (target.nodeName));\n\t\t\t/** #7364  target for <template> may be provided as #document-fragment(11) */ else\n\t\t\t\tthis.e = element(\n\t\t\t\t\t/** @type {keyof HTMLElementTagNameMap} */ (\n\t\t\t\t\t\ttarget.nodeType === 11 ? 'TEMPLATE' : target.nodeName\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\tthis.t =\n\t\t\t\ttarget.tagName !== 'TEMPLATE'\n\t\t\t\t\t? target\n\t\t\t\t\t: /** @type {HTMLTemplateElement} */ (target).content;\n\t\t\tthis.c(html);\n\t\t}\n\t\tthis.i(anchor);\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\th(html) {\n\t\tthis.e.innerHTML = html;\n\t\tthis.n = Array.from(\n\t\t\tthis.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes\n\t\t);\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert(this.t, this.n[i], anchor);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tp(html) {\n\t\tthis.d();\n\t\tthis.h(html);\n\t\tthis.i(this.a);\n\t}\n\n\t/**\n\t * @returns {void} */\n\td() {\n\t\tthis.n.forEach(detach);\n\t}\n}\n\nexport class HtmlTagHydration extends HtmlTag {\n\t/** @type {Element[]} hydration claimed nodes */\n\tl = undefined;\n\n\tconstructor(is_svg = false, claimed_nodes) {\n\t\tsuper(is_svg);\n\t\tthis.e = this.n = null;\n\t\tthis.l = claimed_nodes;\n\t}\n\n\t/**\n\t * @param {string} html\n\t * @returns {void}\n\t */\n\tc(html) {\n\t\tif (this.l) {\n\t\t\tthis.n = this.l;\n\t\t} else {\n\t\t\tsuper.c(html);\n\t\t}\n\t}\n\n\t/**\n\t * @returns {void} */\n\ti(anchor) {\n\t\tfor (let i = 0; i < this.n.length; i += 1) {\n\t\t\tinsert_hydration(this.t, this.n[i], anchor);\n\t\t}\n\t}\n}\n\n/**\n * @param {NamedNodeMap} attributes\n * @returns {{}}\n */\nexport function attribute_to_object(attributes) {\n\tconst result = {};\n\tfor (const attribute of attributes) {\n\t\tresult[attribute.name] = attribute.value;\n\t}\n\treturn result;\n}\n\nconst escaped = {\n\t'\"': '&quot;',\n\t'&': '&amp;',\n\t'<': '&lt;'\n};\n\nconst regex_attribute_characters_to_escape = /[\"&<]/g;\n\n/**\n * Note that the attribute itself should be surrounded in double quotes\n * @param {any} attribute\n */\nfunction escape_attribute(attribute) {\n\treturn String(attribute).replace(regex_attribute_characters_to_escape, (match) => escaped[match]);\n}\n\n/**\n * @param {Record<string, string>} attributes\n */\nexport function stringify_spread(attributes) {\n\tlet str = ' ';\n\tfor (const key in attributes) {\n\t\tif (attributes[key] != null) {\n\t\t\tstr += `${key}=\"${escape_attribute(attributes[key])}\" `;\n\t\t}\n\t}\n\n\treturn str;\n}\n\n/**\n * @param {HTMLElement} element\n * @returns {{}}\n */\nexport function get_custom_elements_slots(element) {\n\tconst result = {};\n\telement.childNodes.forEach(\n\t\t/** @param {Element} node */ (node) => {\n\t\t\tresult[node.slot || 'default'] = true;\n\t\t}\n\t);\n\treturn result;\n}\n\nexport function construct_svelte_component(component, props) {\n\treturn new component(props);\n}\n\n/**\n * @typedef {Node & {\n * \tclaim_order?: number;\n * \thydrate_init?: true;\n * \tactual_end_child?: NodeEx;\n * \tchildNodes: NodeListOf<NodeEx>;\n * }} NodeEx\n */\n\n/** @typedef {ChildNode & NodeEx} ChildNodeEx */\n\n/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */\n\n/**\n * @typedef {ChildNodeEx[] & {\n * \tclaim_info?: {\n * \t\tlast_index: number;\n * \t\ttotal_claimed: number;\n * \t};\n * }} ChildNodeArray\n */\n","import { custom_event } from './dom.js';\n\nexport let current_component;\n\n/** @returns {void} */\nexport function set_current_component(component) {\n\tcurrent_component = component;\n}\n\nexport function get_current_component() {\n\tif (!current_component) throw new Error('Function called outside component initialization');\n\treturn current_component;\n}\n\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#beforeupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function beforeUpdate(fn) {\n\tget_current_component().$$.before_update.push(fn);\n}\n\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.\n *\n * `onMount` does not run inside a [server-side component](https://svelte.dev/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs/svelte#onmount\n * @template T\n * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn\n * @returns {void}\n */\nexport function onMount(fn) {\n\tget_current_component().$$.on_mount.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n *\n * https://svelte.dev/docs/svelte#afterupdate\n * @param {() => any} fn\n * @returns {void}\n */\nexport function afterUpdate(fn) {\n\tget_current_component().$$.after_update.push(fn);\n}\n\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs/svelte#ondestroy\n * @param {() => any} fn\n * @returns {void}\n */\nexport function onDestroy(fn) {\n\tget_current_component().$$.on_destroy.push(fn);\n}\n\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](https://svelte.dev/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * The event dispatcher can be typed to narrow the allowed event names and the type of the `detail` argument:\n * ```ts\n * const dispatch = createEventDispatcher<{\n *  loaded: never; // does not take a detail argument\n *  change: string; // takes a detail argument of type string, which is required\n *  optional: number | null; // takes an optional detail argument of type number\n * }>();\n * ```\n *\n * https://svelte.dev/docs/svelte#createeventdispatcher\n * @template {Record<string, any>} [EventMap=any]\n * @returns {import('./public.js').EventDispatcher<EventMap>}\n */\nexport function createEventDispatcher() {\n\tconst component = get_current_component();\n\treturn (type, detail, { cancelable = false } = {}) => {\n\t\tconst callbacks = component.$$.callbacks[type];\n\t\tif (callbacks) {\n\t\t\t// TODO are there situations where events could be dispatched\n\t\t\t// in a server (non-DOM) environment?\n\t\t\tconst event = custom_event(/** @type {string} */ (type), detail, { cancelable });\n\t\t\tcallbacks.slice().forEach((fn) => {\n\t\t\t\tfn.call(component, event);\n\t\t\t});\n\t\t\treturn !event.defaultPrevented;\n\t\t}\n\t\treturn true;\n\t};\n}\n\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#setcontext\n * @template T\n * @param {any} key\n * @param {T} context\n * @returns {T}\n */\nexport function setContext(key, context) {\n\tget_current_component().$$.context.set(key, context);\n\treturn context;\n}\n\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#getcontext\n * @template T\n * @param {any} key\n * @returns {T}\n */\nexport function getContext(key) {\n\treturn get_current_component().$$.context.get(key);\n}\n\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs/svelte#getallcontexts\n * @template {Map<any, any>} [T=Map<any, any>]\n * @returns {T}\n */\nexport function getAllContexts() {\n\treturn get_current_component().$$.context;\n}\n\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs/svelte#hascontext\n * @param {any} key\n * @returns {boolean}\n */\nexport function hasContext(key) {\n\treturn get_current_component().$$.context.has(key);\n}\n\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\n/**\n * @param component\n * @param event\n * @returns {void}\n */\nexport function bubble(component, event) {\n\tconst callbacks = component.$$.callbacks[event.type];\n\tif (callbacks) {\n\t\t// @ts-ignore\n\t\tcallbacks.slice().forEach((fn) => fn.call(this, event));\n\t}\n}\n","import { run_all } from './utils.js';\nimport { current_component, set_current_component } from './lifecycle.js';\n\nexport const dirty_components = [];\nexport const intros = { enabled: false };\nexport const binding_callbacks = [];\n\nlet render_callbacks = [];\n\nconst flush_callbacks = [];\n\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\n\nlet update_scheduled = false;\n\n/** @returns {void} */\nexport function schedule_update() {\n\tif (!update_scheduled) {\n\t\tupdate_scheduled = true;\n\t\tresolved_promise.then(flush);\n\t}\n}\n\n/** @returns {Promise<void>} */\nexport function tick() {\n\tschedule_update();\n\treturn resolved_promise;\n}\n\n/** @returns {void} */\nexport function add_render_callback(fn) {\n\trender_callbacks.push(fn);\n}\n\n/** @returns {void} */\nexport function add_flush_callback(fn) {\n\tflush_callbacks.push(fn);\n}\n\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\n\nlet flushidx = 0; // Do *not* move this inside the flush() function\n\n/** @returns {void} */\nexport function flush() {\n\t// Do not reenter flush while dirty components are updated, as this can\n\t// result in an infinite loop. Instead, let the inner flush handle it.\n\t// Reentrancy is ok afterwards for bindings etc.\n\tif (flushidx !== 0) {\n\t\treturn;\n\t}\n\tconst saved_component = current_component;\n\tdo {\n\t\t// first, call beforeUpdate functions\n\t\t// and update components\n\t\ttry {\n\t\t\twhile (flushidx < dirty_components.length) {\n\t\t\t\tconst component = dirty_components[flushidx];\n\t\t\t\tflushidx++;\n\t\t\t\tset_current_component(component);\n\t\t\t\tupdate(component.$$);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// reset dirty state to not end up in a deadlocked state and then rethrow\n\t\t\tdirty_components.length = 0;\n\t\t\tflushidx = 0;\n\t\t\tthrow e;\n\t\t}\n\t\tset_current_component(null);\n\t\tdirty_components.length = 0;\n\t\tflushidx = 0;\n\t\twhile (binding_callbacks.length) binding_callbacks.pop()();\n\t\t// then, once components are updated, call\n\t\t// afterUpdate functions. This may cause\n\t\t// subsequent updates...\n\t\tfor (let i = 0; i < render_callbacks.length; i += 1) {\n\t\t\tconst callback = render_callbacks[i];\n\t\t\tif (!seen_callbacks.has(callback)) {\n\t\t\t\t// ...so guard against infinite loops\n\t\t\t\tseen_callbacks.add(callback);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t}\n\t\trender_callbacks.length = 0;\n\t} while (dirty_components.length);\n\twhile (flush_callbacks.length) {\n\t\tflush_callbacks.pop()();\n\t}\n\tupdate_scheduled = false;\n\tseen_callbacks.clear();\n\tset_current_component(saved_component);\n}\n\n/** @returns {void} */\nfunction update($$) {\n\tif ($$.fragment !== null) {\n\t\t$$.update();\n\t\trun_all($$.before_update);\n\t\tconst dirty = $$.dirty;\n\t\t$$.dirty = [-1];\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\n\t\t$$.after_update.forEach(add_render_callback);\n\t}\n}\n\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n * @param {Function[]} fns\n * @returns {void}\n */\nexport function flush_render_callbacks(fns) {\n\tconst filtered = [];\n\tconst targets = [];\n\trender_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));\n\ttargets.forEach((c) => c());\n\trender_callbacks = filtered;\n}\n","import { identity as linear, is_function, noop, run_all } from './utils.js';\nimport { now } from './environment.js';\nimport { loop } from './loop.js';\nimport { create_rule, delete_rule } from './style_manager.js';\nimport { custom_event } from './dom.js';\nimport { add_render_callback } from './scheduler.js';\n\n/**\n * @type {Promise<void> | null}\n */\nlet promise;\n\n/**\n * @returns {Promise<void>}\n */\nfunction wait() {\n\tif (!promise) {\n\t\tpromise = Promise.resolve();\n\t\tpromise.then(() => {\n\t\t\tpromise = null;\n\t\t});\n\t}\n\treturn promise;\n}\n\n/**\n * @param {Element} node\n * @param {INTRO | OUTRO | boolean} direction\n * @param {'start' | 'end'} kind\n * @returns {void}\n */\nfunction dispatch(node, direction, kind) {\n\tnode.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\n\nconst outroing = new Set();\n\n/**\n * @type {Outro}\n */\nlet outros;\n\n/**\n * @returns {void} */\nexport function group_outros() {\n\toutros = {\n\t\tr: 0,\n\t\tc: [],\n\t\tp: outros // parent group\n\t};\n}\n\n/**\n * @returns {void} */\nexport function check_outros() {\n\tif (!outros.r) {\n\t\trun_all(outros.c);\n\t}\n\toutros = outros.p;\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} [local]\n * @returns {void}\n */\nexport function transition_in(block, local) {\n\tif (block && block.i) {\n\t\toutroing.delete(block);\n\t\tblock.i(local);\n\t}\n}\n\n/**\n * @param {import('./private.js').Fragment} block\n * @param {0 | 1} local\n * @param {0 | 1} [detach]\n * @param {() => void} [callback]\n * @returns {void}\n */\nexport function transition_out(block, local, detach, callback) {\n\tif (block && block.o) {\n\t\tif (outroing.has(block)) return;\n\t\toutroing.add(block);\n\t\toutros.c.push(() => {\n\t\t\toutroing.delete(block);\n\t\t\tif (callback) {\n\t\t\t\tif (detach) block.d(1);\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\tblock.o(local);\n\t} else if (callback) {\n\t\tcallback();\n\t}\n}\n\n/**\n * @type {import('../transition/public.js').TransitionConfig}\n */\nconst null_transition = { duration: 0 };\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ start(): void; invalidate(): void; end(): void; }}\n */\nexport function create_in_transition(node, fn, params) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'in' };\n\tlet config = fn(node, params, options);\n\tlet running = false;\n\tlet animation_name;\n\tlet task;\n\tlet uid = 0;\n\n\t/**\n\t * @returns {void} */\n\tfunction cleanup() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\t\tif (css) animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n\t\ttick(0, 1);\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tif (task) task.abort();\n\t\trunning = true;\n\t\tadd_render_callback(() => dispatch(node, true, 'start'));\n\t\ttask = loop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(1, 0);\n\t\t\t\t\tdispatch(node, true, 'end');\n\t\t\t\t\tcleanup();\n\t\t\t\t\treturn (running = false);\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\tlet started = false;\n\treturn {\n\t\tstart() {\n\t\t\tif (started) return;\n\t\t\tstarted = true;\n\t\t\tdelete_rule(node);\n\t\t\tif (is_function(config)) {\n\t\t\t\tconfig = config(options);\n\t\t\t\twait().then(go);\n\t\t\t} else {\n\t\t\t\tgo();\n\t\t\t}\n\t\t},\n\t\tinvalidate() {\n\t\t\tstarted = false;\n\t\t},\n\t\tend() {\n\t\t\tif (running) {\n\t\t\t\tcleanup();\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @returns {{ end(reset: any): void; }}\n */\nexport function create_out_transition(node, fn, params) {\n\t/** @type {TransitionOptions} */\n\tconst options = { direction: 'out' };\n\tlet config = fn(node, params, options);\n\tlet running = true;\n\tlet animation_name;\n\tconst group = outros;\n\tgroup.r += 1;\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction go() {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\tif (css) animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n\n\t\tconst start_time = now() + delay;\n\t\tconst end_time = start_time + duration;\n\t\tadd_render_callback(() => dispatch(node, false, 'start'));\n\n\t\tif ('inert' in node) {\n\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\tnode.inert = true;\n\t\t}\n\n\t\tloop((now) => {\n\t\t\tif (running) {\n\t\t\t\tif (now >= end_time) {\n\t\t\t\t\ttick(0, 1);\n\t\t\t\t\tdispatch(node, false, 'end');\n\t\t\t\t\tif (!--group.r) {\n\t\t\t\t\t\t// this will result in `end()` being called,\n\t\t\t\t\t\t// so we don't need to clean up here\n\t\t\t\t\t\trun_all(group.c);\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (now >= start_time) {\n\t\t\t\t\tconst t = easing((now - start_time) / duration);\n\t\t\t\t\ttick(1 - t, t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn running;\n\t\t});\n\t}\n\n\tif (is_function(config)) {\n\t\twait().then(() => {\n\t\t\t// @ts-ignore\n\t\t\tconfig = config(options);\n\t\t\tgo();\n\t\t});\n\t} else {\n\t\tgo();\n\t}\n\n\treturn {\n\t\tend(reset) {\n\t\t\tif (reset && 'inert' in node) {\n\t\t\t\tnode.inert = original_inert_value;\n\t\t\t}\n\t\t\tif (reset && config.tick) {\n\t\t\t\tconfig.tick(1, 0);\n\t\t\t}\n\t\t\tif (running) {\n\t\t\t\tif (animation_name) delete_rule(node, animation_name);\n\t\t\t\trunning = false;\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Element & ElementCSSInlineStyle} node\n * @param {TransitionFn} fn\n * @param {any} params\n * @param {boolean} intro\n * @returns {{ run(b: 0 | 1): void; end(): void; }}\n */\nexport function create_bidirectional_transition(node, fn, params, intro) {\n\t/**\n\t * @type {TransitionOptions} */\n\tconst options = { direction: 'both' };\n\tlet config = fn(node, params, options);\n\tlet t = intro ? 0 : 1;\n\n\t/**\n\t * @type {Program | null} */\n\tlet running_program = null;\n\n\t/**\n\t * @type {PendingProgram | null} */\n\tlet pending_program = null;\n\tlet animation_name = null;\n\n\t/** @type {boolean} */\n\tlet original_inert_value;\n\n\t/**\n\t * @returns {void} */\n\tfunction clear_animation() {\n\t\tif (animation_name) delete_rule(node, animation_name);\n\t}\n\n\t/**\n\t * @param {PendingProgram} program\n\t * @param {number} duration\n\t * @returns {Program}\n\t */\n\tfunction init(program, duration) {\n\t\tconst d = /** @type {Program['d']} */ (program.b - t);\n\t\tduration *= Math.abs(d);\n\t\treturn {\n\t\t\ta: t,\n\t\t\tb: program.b,\n\t\t\td,\n\t\t\tduration,\n\t\t\tstart: program.start,\n\t\t\tend: program.start + duration,\n\t\t\tgroup: program.group\n\t\t};\n\t}\n\n\t/**\n\t * @param {INTRO | OUTRO} b\n\t * @returns {void}\n\t */\n\tfunction go(b) {\n\t\tconst {\n\t\t\tdelay = 0,\n\t\t\tduration = 300,\n\t\t\teasing = linear,\n\t\t\ttick = noop,\n\t\t\tcss\n\t\t} = config || null_transition;\n\n\t\t/**\n\t\t * @type {PendingProgram} */\n\t\tconst program = {\n\t\t\tstart: now() + delay,\n\t\t\tb\n\t\t};\n\n\t\tif (!b) {\n\t\t\t// @ts-ignore todo: improve typings\n\t\t\tprogram.group = outros;\n\t\t\toutros.r += 1;\n\t\t}\n\n\t\tif ('inert' in node) {\n\t\t\tif (b) {\n\t\t\t\tif (original_inert_value !== undefined) {\n\t\t\t\t\t// aborted/reversed outro — restore previous inert value\n\t\t\t\t\tnode.inert = original_inert_value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toriginal_inert_value = /** @type {HTMLElement} */ (node).inert;\n\t\t\t\tnode.inert = true;\n\t\t\t}\n\t\t}\n\n\t\tif (running_program || pending_program) {\n\t\t\tpending_program = program;\n\t\t} else {\n\t\t\t// if this is an intro, and there's a delay, we need to do\n\t\t\t// an initial tick and/or apply CSS animation immediately\n\t\t\tif (css) {\n\t\t\t\tclear_animation();\n\t\t\t\tanimation_name = create_rule(node, t, b, duration, delay, easing, css);\n\t\t\t}\n\t\t\tif (b) tick(0, 1);\n\t\t\trunning_program = init(program, duration);\n\t\t\tadd_render_callback(() => dispatch(node, b, 'start'));\n\t\t\tloop((now) => {\n\t\t\t\tif (pending_program && now > pending_program.start) {\n\t\t\t\t\trunning_program = init(pending_program, duration);\n\t\t\t\t\tpending_program = null;\n\t\t\t\t\tdispatch(node, running_program.b, 'start');\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\tanimation_name = create_rule(\n\t\t\t\t\t\t\tnode,\n\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\trunning_program.b,\n\t\t\t\t\t\t\trunning_program.duration,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\teasing,\n\t\t\t\t\t\t\tconfig.css\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (running_program) {\n\t\t\t\t\tif (now >= running_program.end) {\n\t\t\t\t\t\ttick((t = running_program.b), 1 - t);\n\t\t\t\t\t\tdispatch(node, running_program.b, 'end');\n\t\t\t\t\t\tif (!pending_program) {\n\t\t\t\t\t\t\t// we're done\n\t\t\t\t\t\t\tif (running_program.b) {\n\t\t\t\t\t\t\t\t// intro — we can tidy up immediately\n\t\t\t\t\t\t\t\tclear_animation();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// outro — needs to be coordinated\n\t\t\t\t\t\t\t\tif (!--running_program.group.r) run_all(running_program.group.c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trunning_program = null;\n\t\t\t\t\t} else if (now >= running_program.start) {\n\t\t\t\t\t\tconst p = now - running_program.start;\n\t\t\t\t\t\tt = running_program.a + running_program.d * easing(p / running_program.duration);\n\t\t\t\t\t\ttick(t, 1 - t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !!(running_program || pending_program);\n\t\t\t});\n\t\t}\n\t}\n\treturn {\n\t\trun(b) {\n\t\t\tif (is_function(config)) {\n\t\t\t\twait().then(() => {\n\t\t\t\t\tconst opts = { direction: b ? 'in' : 'out' };\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconfig = config(opts);\n\t\t\t\t\tgo(b);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgo(b);\n\t\t\t}\n\t\t},\n\t\tend() {\n\t\t\tclear_animation();\n\t\t\trunning_program = pending_program = null;\n\t\t}\n\t};\n}\n\n/** @typedef {1} INTRO */\n/** @typedef {0} OUTRO */\n/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */\n/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */\n\n/**\n * @typedef {Object} Outro\n * @property {number} r\n * @property {Function[]} c\n * @property {Object} p\n */\n\n/**\n * @typedef {Object} PendingProgram\n * @property {number} start\n * @property {INTRO|OUTRO} b\n * @property {Outro} [group]\n */\n\n/**\n * @typedef {Object} Program\n * @property {number} a\n * @property {INTRO|OUTRO} b\n * @property {1|-1} d\n * @property {number} duration\n * @property {number} start\n * @property {number} end\n * @property {Outro} [group]\n */\n","import {\n\tadd_render_callback,\n\tflush,\n\tflush_render_callbacks,\n\tschedule_update,\n\tdirty_components\n} from './scheduler.js';\nimport { current_component, set_current_component } from './lifecycle.js';\nimport { blank_object, is_empty, is_function, run, run_all, noop } from './utils.js';\nimport {\n\tchildren,\n\tdetach,\n\tstart_hydrating,\n\tend_hydrating,\n\tget_custom_elements_slots,\n\tinsert,\n\telement,\n\tattr\n} from './dom.js';\nimport { transition_in } from './transitions.js';\n\n/** @returns {void} */\nexport function bind(component, name, callback) {\n\tconst index = component.$$.props[name];\n\tif (index !== undefined) {\n\t\tcomponent.$$.bound[index] = callback;\n\t\tcallback(component.$$.ctx[index]);\n\t}\n}\n\n/** @returns {void} */\nexport function create_component(block) {\n\tblock && block.c();\n}\n\n/** @returns {void} */\nexport function claim_component(block, parent_nodes) {\n\tblock && block.l(parent_nodes);\n}\n\n/** @returns {void} */\nexport function mount_component(component, target, anchor) {\n\tconst { fragment, after_update } = component.$$;\n\tfragment && fragment.m(target, anchor);\n\t// onMount happens before the initial afterUpdate\n\tadd_render_callback(() => {\n\t\tconst new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n\t\t// if the component was destroyed immediately\n\t\t// it will update the `$$.on_destroy` reference to `null`.\n\t\t// the destructured on_destroy may still reference to the old array\n\t\tif (component.$$.on_destroy) {\n\t\t\tcomponent.$$.on_destroy.push(...new_on_destroy);\n\t\t} else {\n\t\t\t// Edge case - component was destroyed immediately,\n\t\t\t// most likely as a result of a binding initialising\n\t\t\trun_all(new_on_destroy);\n\t\t}\n\t\tcomponent.$$.on_mount = [];\n\t});\n\tafter_update.forEach(add_render_callback);\n}\n\n/** @returns {void} */\nexport function destroy_component(component, detaching) {\n\tconst $$ = component.$$;\n\tif ($$.fragment !== null) {\n\t\tflush_render_callbacks($$.after_update);\n\t\trun_all($$.on_destroy);\n\t\t$$.fragment && $$.fragment.d(detaching);\n\t\t// TODO null out other refs, including component.$$ (but need to\n\t\t// preserve final state?)\n\t\t$$.on_destroy = $$.fragment = null;\n\t\t$$.ctx = [];\n\t}\n}\n\n/** @returns {void} */\nfunction make_dirty(component, i) {\n\tif (component.$$.dirty[0] === -1) {\n\t\tdirty_components.push(component);\n\t\tschedule_update();\n\t\tcomponent.$$.dirty.fill(0);\n\t}\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 << i % 31;\n}\n\n// TODO: Document the other params\n/**\n * @param {SvelteComponent} component\n * @param {import('./public.js').ComponentConstructorOptions} options\n *\n * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.\n * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.\n * This will be the `add_css` function from the compiled component.\n *\n * @returns {void}\n */\nexport function init(\n\tcomponent,\n\toptions,\n\tinstance,\n\tcreate_fragment,\n\tnot_equal,\n\tprops,\n\tappend_styles = null,\n\tdirty = [-1]\n) {\n\tconst parent_component = current_component;\n\tset_current_component(component);\n\t/** @type {import('./private.js').T$$} */\n\tconst $$ = (component.$$ = {\n\t\tfragment: null,\n\t\tctx: [],\n\t\t// state\n\t\tprops,\n\t\tupdate: noop,\n\t\tnot_equal,\n\t\tbound: blank_object(),\n\t\t// lifecycle\n\t\ton_mount: [],\n\t\ton_destroy: [],\n\t\ton_disconnect: [],\n\t\tbefore_update: [],\n\t\tafter_update: [],\n\t\tcontext: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n\t\t// everything else\n\t\tcallbacks: blank_object(),\n\t\tdirty,\n\t\tskip_bound: false,\n\t\troot: options.target || parent_component.$$.root\n\t});\n\tappend_styles && append_styles($$.root);\n\tlet ready = false;\n\t$$.ctx = instance\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\n\t\t\t\t\tif (ready) make_dirty(component, i);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t  })\n\t\t: [];\n\t$$.update();\n\tready = true;\n\trun_all($$.before_update);\n\t// `false` as a special case of no DOM component\n\t$$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n\tif (options.target) {\n\t\tif (options.hydrate) {\n\t\t\tstart_hydrating();\n\t\t\t// TODO: what is the correct type here?\n\t\t\t// @ts-expect-error\n\t\t\tconst nodes = children(options.target);\n\t\t\t$$.fragment && $$.fragment.l(nodes);\n\t\t\tnodes.forEach(detach);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t$$.fragment && $$.fragment.c();\n\t\t}\n\t\tif (options.intro) transition_in(component.$$.fragment);\n\t\tmount_component(component, options.target, options.anchor);\n\t\tend_hydrating();\n\t\tflush();\n\t}\n\tset_current_component(parent_component);\n}\n\nexport let SvelteElement;\n\nif (typeof HTMLElement === 'function') {\n\tSvelteElement = class extends HTMLElement {\n\t\t/** The Svelte component constructor */\n\t\t$$ctor;\n\t\t/** Slots */\n\t\t$$s;\n\t\t/** The Svelte component instance */\n\t\t$$c;\n\t\t/** Whether or not the custom element is connected */\n\t\t$$cn = false;\n\t\t/** Component props data */\n\t\t$$d = {};\n\t\t/** `true` if currently in the process of reflecting component props back to attributes */\n\t\t$$r = false;\n\t\t/** @type {Record<string, CustomElementPropDefinition>} Props definition (name, reflected, type etc) */\n\t\t$$p_d = {};\n\t\t/** @type {Record<string, Function[]>} Event listeners */\n\t\t$$l = {};\n\t\t/** @type {Map<Function, Function>} Event listener unsubscribe functions */\n\t\t$$l_u = new Map();\n\n\t\tconstructor($$componentCtor, $$slots, use_shadow_dom) {\n\t\t\tsuper();\n\t\t\tthis.$$ctor = $$componentCtor;\n\t\t\tthis.$$s = $$slots;\n\t\t\tif (use_shadow_dom) {\n\t\t\t\tthis.attachShadow({ mode: 'open' });\n\t\t\t}\n\t\t}\n\n\t\taddEventListener(type, listener, options) {\n\t\t\t// We can't determine upfront if the event is a custom event or not, so we have to\n\t\t\t// listen to both. If someone uses a custom event with the same name as a regular\n\t\t\t// browser event, this fires twice - we can't avoid that.\n\t\t\tthis.$$l[type] = this.$$l[type] || [];\n\t\t\tthis.$$l[type].push(listener);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t}\n\t\t\tsuper.addEventListener(type, listener, options);\n\t\t}\n\n\t\tremoveEventListener(type, listener, options) {\n\t\t\tsuper.removeEventListener(type, listener, options);\n\t\t\tif (this.$$c) {\n\t\t\t\tconst unsub = this.$$l_u.get(listener);\n\t\t\t\tif (unsub) {\n\t\t\t\t\tunsub();\n\t\t\t\t\tthis.$$l_u.delete(listener);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tasync connectedCallback() {\n\t\t\tthis.$$cn = true;\n\t\t\tif (!this.$$c) {\n\t\t\t\t// We wait one tick to let possible child slot elements be created/mounted\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tif (!this.$$cn || this.$$c) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfunction create_slot(name) {\n\t\t\t\t\treturn () => {\n\t\t\t\t\t\tlet node;\n\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\tc: function create() {\n\t\t\t\t\t\t\t\tnode = element('slot');\n\t\t\t\t\t\t\t\tif (name !== 'default') {\n\t\t\t\t\t\t\t\t\tattr(node, 'name', name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @param {HTMLElement} target\n\t\t\t\t\t\t\t * @param {HTMLElement} [anchor]\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tm: function mount(target, anchor) {\n\t\t\t\t\t\t\t\tinsert(target, node, anchor);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\td: function destroy(detaching) {\n\t\t\t\t\t\t\t\tif (detaching) {\n\t\t\t\t\t\t\t\t\tdetach(node);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn obj;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tconst $$slots = {};\n\t\t\t\tconst existing_slots = get_custom_elements_slots(this);\n\t\t\t\tfor (const name of this.$$s) {\n\t\t\t\t\tif (name in existing_slots) {\n\t\t\t\t\t\t$$slots[name] = [create_slot(name)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const attribute of this.attributes) {\n\t\t\t\t\t// this.$$data takes precedence over this.attributes\n\t\t\t\t\tconst name = this.$$g_p(attribute.name);\n\t\t\t\t\tif (!(name in this.$$d)) {\n\t\t\t\t\t\tthis.$$d[name] = get_custom_element_value(name, attribute.value, this.$$p_d, 'toProp');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Port over props that were set programmatically before ce was initialized\n\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\tif (!(key in this.$$d) && this[key] !== undefined) {\n\t\t\t\t\t\tthis.$$d[key] = this[key]; // don't transform, these were set through JavaScript\n\t\t\t\t\t\tdelete this[key]; // remove the property that shadows the getter/setter\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$c = new this.$$ctor({\n\t\t\t\t\ttarget: this.shadowRoot || this,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...this.$$d,\n\t\t\t\t\t\t$$slots,\n\t\t\t\t\t\t$$scope: {\n\t\t\t\t\t\t\tctx: []\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Reflect component props as attributes\n\t\t\t\tconst reflect_attributes = () => {\n\t\t\t\t\tthis.$$r = true;\n\t\t\t\t\tfor (const key in this.$$p_d) {\n\t\t\t\t\t\tthis.$$d[key] = this.$$c.$$.ctx[this.$$c.$$.props[key]];\n\t\t\t\t\t\tif (this.$$p_d[key].reflect) {\n\t\t\t\t\t\t\tconst attribute_value = get_custom_element_value(\n\t\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\t\tthis.$$d[key],\n\t\t\t\t\t\t\t\tthis.$$p_d,\n\t\t\t\t\t\t\t\t'toAttribute'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (attribute_value == null) {\n\t\t\t\t\t\t\t\tthis.removeAttribute(this.$$p_d[key].attribute || key);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.setAttribute(this.$$p_d[key].attribute || key, attribute_value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.$$r = false;\n\t\t\t\t};\n\t\t\t\tthis.$$c.$$.after_update.push(reflect_attributes);\n\t\t\t\treflect_attributes(); // once initially because after_update is added too late for first render\n\n\t\t\t\tfor (const type in this.$$l) {\n\t\t\t\t\tfor (const listener of this.$$l[type]) {\n\t\t\t\t\t\tconst unsub = this.$$c.$on(type, listener);\n\t\t\t\t\t\tthis.$$l_u.set(listener, unsub);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.$$l = {};\n\t\t\t}\n\t\t}\n\n\t\t// We don't need this when working within Svelte code, but for compatibility of people using this outside of Svelte\n\t\t// and setting attributes through setAttribute etc, this is helpful\n\t\tattributeChangedCallback(attr, _oldValue, newValue) {\n\t\t\tif (this.$$r) return;\n\t\t\tattr = this.$$g_p(attr);\n\t\t\tthis.$$d[attr] = get_custom_element_value(attr, newValue, this.$$p_d, 'toProp');\n\t\t\tthis.$$c?.$set({ [attr]: this.$$d[attr] });\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.$$cn = false;\n\t\t\t// In a microtask, because this could be a move within the DOM\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tif (!this.$$cn && this.$$c) {\n\t\t\t\t\tthis.$$c.$destroy();\n\t\t\t\t\tthis.$$c = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t$$g_p(attribute_name) {\n\t\t\treturn (\n\t\t\t\tObject.keys(this.$$p_d).find(\n\t\t\t\t\t(key) =>\n\t\t\t\t\t\tthis.$$p_d[key].attribute === attribute_name ||\n\t\t\t\t\t\t(!this.$$p_d[key].attribute && key.toLowerCase() === attribute_name)\n\t\t\t\t) || attribute_name\n\t\t\t);\n\t\t}\n\t};\n}\n\n/**\n * @param {string} prop\n * @param {any} value\n * @param {Record<string, CustomElementPropDefinition>} props_definition\n * @param {'toAttribute' | 'toProp'} [transform]\n */\nfunction get_custom_element_value(prop, value, props_definition, transform) {\n\tconst type = props_definition[prop]?.type;\n\tvalue = type === 'Boolean' && typeof value !== 'boolean' ? value != null : value;\n\tif (!transform || !props_definition[prop]) {\n\t\treturn value;\n\t} else if (transform === 'toAttribute') {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value == null ? null : JSON.stringify(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value ? '' : null;\n\t\t\tcase 'Number':\n\t\t\t\treturn value == null ? null : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t} else {\n\t\tswitch (type) {\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn value && JSON.parse(value);\n\t\t\tcase 'Boolean':\n\t\t\t\treturn value; // conversion already handled above\n\t\t\tcase 'Number':\n\t\t\t\treturn value != null ? +value : value;\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n}\n\n/**\n * @internal\n *\n * Turn a Svelte component into a custom element.\n * @param {import('./public.js').ComponentType} Component  A Svelte component constructor\n * @param {Record<string, CustomElementPropDefinition>} props_definition  The props to observe\n * @param {string[]} slots  The slots to create\n * @param {string[]} accessors  Other accessors besides the ones for props the component has\n * @param {boolean} use_shadow_dom  Whether to use shadow DOM\n * @param {(ce: new () => HTMLElement) => new () => HTMLElement} [extend]\n */\nexport function create_custom_element(\n\tComponent,\n\tprops_definition,\n\tslots,\n\taccessors,\n\tuse_shadow_dom,\n\textend\n) {\n\tlet Class = class extends SvelteElement {\n\t\tconstructor() {\n\t\t\tsuper(Component, slots, use_shadow_dom);\n\t\t\tthis.$$p_d = props_definition;\n\t\t}\n\t\tstatic get observedAttributes() {\n\t\t\treturn Object.keys(props_definition).map((key) =>\n\t\t\t\t(props_definition[key].attribute || key).toLowerCase()\n\t\t\t);\n\t\t}\n\t};\n\tObject.keys(props_definition).forEach((prop) => {\n\t\tObject.defineProperty(Class.prototype, prop, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c && prop in this.$$c ? this.$$c[prop] : this.$$d[prop];\n\t\t\t},\n\t\t\tset(value) {\n\t\t\t\tvalue = get_custom_element_value(prop, value, props_definition);\n\t\t\t\tthis.$$d[prop] = value;\n\t\t\t\tthis.$$c?.$set({ [prop]: value });\n\t\t\t}\n\t\t});\n\t});\n\taccessors.forEach((accessor) => {\n\t\tObject.defineProperty(Class.prototype, accessor, {\n\t\t\tget() {\n\t\t\t\treturn this.$$c?.[accessor];\n\t\t\t}\n\t\t});\n\t});\n\tif (extend) {\n\t\t// @ts-expect-error - assigning here is fine\n\t\tClass = extend(Class);\n\t}\n\tComponent.element = /** @type {any} */ (Class);\n\treturn Class;\n}\n\n/**\n * Base class for Svelte components. Used when dev=false.\n *\n * @template {Record<string, any>} [Props=any]\n * @template {Record<string, any>} [Events=any]\n */\nexport class SvelteComponent {\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$ = undefined;\n\t/**\n\t * ### PRIVATE API\n\t *\n\t * Do not use, may change at any time\n\t *\n\t * @type {any}\n\t */\n\t$$set = undefined;\n\n\t/** @returns {void} */\n\t$destroy() {\n\t\tdestroy_component(this, 1);\n\t\tthis.$destroy = noop;\n\t}\n\n\t/**\n\t * @template {Extract<keyof Events, string>} K\n\t * @param {K} type\n\t * @param {((e: Events[K]) => void) | null | undefined} callback\n\t * @returns {() => void}\n\t */\n\t$on(type, callback) {\n\t\tif (!is_function(callback)) {\n\t\t\treturn noop;\n\t\t}\n\t\tconst callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);\n\t\tcallbacks.push(callback);\n\t\treturn () => {\n\t\t\tconst index = callbacks.indexOf(callback);\n\t\t\tif (index !== -1) callbacks.splice(index, 1);\n\t\t};\n\t}\n\n\t/**\n\t * @param {Partial<Props>} props\n\t * @returns {void}\n\t */\n\t$set(props) {\n\t\tif (this.$$set && !is_empty(props)) {\n\t\t\tthis.$$.skip_bound = true;\n\t\t\tthis.$$set(props);\n\t\t\tthis.$$.skip_bound = false;\n\t\t}\n\t}\n}\n\n/**\n * @typedef {Object} CustomElementPropDefinition\n * @property {string} [attribute]\n * @property {boolean} [reflect]\n * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]\n */\n","// generated during release, do not modify\n\n/**\n * The current version, as set in package.json.\n *\n * https://svelte.dev/docs/svelte-compiler#svelte-version\n * @type {string}\n */\nexport const VERSION = '4.2.16';\nexport const PUBLIC_VERSION = '4';\n","import { PUBLIC_VERSION } from '../../../shared/version.js';\n\nif (typeof window !== 'undefined')\n\t// @ts-ignore\n\t(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);\n","import {\n\trun_all,\n\tsubscribe,\n\tnoop,\n\tsafe_not_equal,\n\tis_function,\n\tget_store_value\n} from '../internal/index.js';\n\nconst subscriber_queue = [];\n\n/**\n * Creates a `Readable` store that allows reading by subscription.\n *\n * https://svelte.dev/docs/svelte-store#readable\n * @template T\n * @param {T} [value] initial value\n * @param {import('./public.js').StartStopNotifier<T>} [start]\n * @returns {import('./public.js').Readable<T>}\n */\nexport function readable(value, start) {\n\treturn {\n\t\tsubscribe: writable(value, start).subscribe\n\t};\n}\n\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n *\n * https://svelte.dev/docs/svelte-store#writable\n * @template T\n * @param {T} [value] initial value\n * @param {import('./public.js').StartStopNotifier<T>} [start]\n * @returns {import('./public.js').Writable<T>}\n */\nexport function writable(value, start = noop) {\n\t/** @type {import('./public.js').Unsubscriber} */\n\tlet stop;\n\t/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */\n\tconst subscribers = new Set();\n\t/** @param {T} new_value\n\t * @returns {void}\n\t */\n\tfunction set(new_value) {\n\t\tif (safe_not_equal(value, new_value)) {\n\t\t\tvalue = new_value;\n\t\t\tif (stop) {\n\t\t\t\t// store is ready\n\t\t\t\tconst run_queue = !subscriber_queue.length;\n\t\t\t\tfor (const subscriber of subscribers) {\n\t\t\t\t\tsubscriber[1]();\n\t\t\t\t\tsubscriber_queue.push(subscriber, value);\n\t\t\t\t}\n\t\t\t\tif (run_queue) {\n\t\t\t\t\tfor (let i = 0; i < subscriber_queue.length; i += 2) {\n\t\t\t\t\t\tsubscriber_queue[i][0](subscriber_queue[i + 1]);\n\t\t\t\t\t}\n\t\t\t\t\tsubscriber_queue.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {import('./public.js').Updater<T>} fn\n\t * @returns {void}\n\t */\n\tfunction update(fn) {\n\t\tset(fn(value));\n\t}\n\n\t/**\n\t * @param {import('./public.js').Subscriber<T>} run\n\t * @param {import('./private.js').Invalidator<T>} [invalidate]\n\t * @returns {import('./public.js').Unsubscriber}\n\t */\n\tfunction subscribe(run, invalidate = noop) {\n\t\t/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */\n\t\tconst subscriber = [run, invalidate];\n\t\tsubscribers.add(subscriber);\n\t\tif (subscribers.size === 1) {\n\t\t\tstop = start(set, update) || noop;\n\t\t}\n\t\trun(value);\n\t\treturn () => {\n\t\t\tsubscribers.delete(subscriber);\n\t\t\tif (subscribers.size === 0 && stop) {\n\t\t\t\tstop();\n\t\t\t\tstop = null;\n\t\t\t}\n\t\t};\n\t}\n\treturn { set, update, subscribe };\n}\n\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n *\n * https://svelte.dev/docs/svelte-store#derived\n * @template {import('./private.js').Stores} S\n * @template T\n * @overload\n * @param {S} stores - input stores\n * @param {(values: import('./private.js').StoresValues<S>, set: (value: T) => void, update: (fn: import('./public.js').Updater<T>) => void) => import('./public.js').Unsubscriber | void} fn - function callback that aggregates the values\n * @param {T} [initial_value] - initial value\n * @returns {import('./public.js').Readable<T>}\n */\n\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n *\n * https://svelte.dev/docs/svelte-store#derived\n * @template {import('./private.js').Stores} S\n * @template T\n * @overload\n * @param {S} stores - input stores\n * @param {(values: import('./private.js').StoresValues<S>) => T} fn - function callback that aggregates the values\n * @param {T} [initial_value] - initial value\n * @returns {import('./public.js').Readable<T>}\n */\n\n/**\n * @template {import('./private.js').Stores} S\n * @template T\n * @param {S} stores\n * @param {Function} fn\n * @param {T} [initial_value]\n * @returns {import('./public.js').Readable<T>}\n */\nexport function derived(stores, fn, initial_value) {\n\tconst single = !Array.isArray(stores);\n\t/** @type {Array<import('./public.js').Readable<any>>} */\n\tconst stores_array = single ? [stores] : stores;\n\tif (!stores_array.every(Boolean)) {\n\t\tthrow new Error('derived() expects stores as input, got a falsy value');\n\t}\n\tconst auto = fn.length < 2;\n\treturn readable(initial_value, (set, update) => {\n\t\tlet started = false;\n\t\tconst values = [];\n\t\tlet pending = 0;\n\t\tlet cleanup = noop;\n\t\tconst sync = () => {\n\t\t\tif (pending) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcleanup();\n\t\t\tconst result = fn(single ? values[0] : values, set, update);\n\t\t\tif (auto) {\n\t\t\t\tset(result);\n\t\t\t} else {\n\t\t\t\tcleanup = is_function(result) ? result : noop;\n\t\t\t}\n\t\t};\n\t\tconst unsubscribers = stores_array.map((store, i) =>\n\t\t\tsubscribe(\n\t\t\t\tstore,\n\t\t\t\t(value) => {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t\tpending &= ~(1 << i);\n\t\t\t\t\tif (started) {\n\t\t\t\t\t\tsync();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tpending |= 1 << i;\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\t\tstarted = true;\n\t\tsync();\n\t\treturn function stop() {\n\t\t\trun_all(unsubscribers);\n\t\t\tcleanup();\n\t\t\t// We need to set this to false because callbacks can still happen despite having unsubscribed:\n\t\t\t// Callbacks might already be placed in the queue which doesn't know it should no longer\n\t\t\t// invoke this derived store.\n\t\t\tstarted = false;\n\t\t};\n\t});\n}\n\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * https://svelte.dev/docs/svelte-store#readonly\n * @template T\n * @param {import('./public.js').Readable<T>} store  - store to make readonly\n * @returns {import('./public.js').Readable<T>}\n */\nexport function readonly(store) {\n\treturn {\n\t\tsubscribe: store.subscribe.bind(store)\n\t};\n}\n\nexport { get_store_value as get };\n","import { writable } from \"svelte/store\";\n\n\nexport let initialToken = { access_token: null, token_type: null};\ntry {\n    initialToken = JSON.parse(localStorage.getItem(\"authToken\")) || initialToken;\n} catch (e) {\n    console.error(e);\n}\nexport const authToken = writable(initialToken);\nauthToken.subscribe((value) => {\n    if (value) {\n        localStorage.setItem(\"authToken\", JSON.stringify(value));\n    }\n});\n\n\nexport const user = writable(null);\n\nexport const task = writable(null);","/**\n * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js\n * https://github.com/reach/router/blob/master/LICENSE\n */\n\nconst PARAM = /^:(.+)/;\nconst SEGMENT_POINTS = 4;\nconst STATIC_POINTS = 3;\nconst DYNAMIC_POINTS = 2;\nconst SPLAT_PENALTY = 1;\nconst ROOT_POINTS = 1;\n\n/**\n * Split up the URI into segments delimited by `/`\n * Strip starting/ending `/`\n * @param {string} uri\n * @return {string[]}\n */\nconst segmentize = (uri) => uri.replace(/(^\\/+|\\/+$)/g, \"\").split(\"/\");\n/**\n * Strip `str` of potential start and end `/`\n * @param {string} string\n * @return {string}\n */\nconst stripSlashes = (string) => string.replace(/(^\\/+|\\/+$)/g, \"\");\n/**\n * Score a route depending on how its individual segments look\n * @param {object} route\n * @param {number} index\n * @return {object}\n */\nconst rankRoute = (route, index) => {\n    const score = route.default\n        ? 0\n        : segmentize(route.path).reduce((score, segment) => {\n              score += SEGMENT_POINTS;\n\n              if (segment === \"\") {\n                  score += ROOT_POINTS;\n              } else if (PARAM.test(segment)) {\n                  score += DYNAMIC_POINTS;\n              } else if (segment[0] === \"*\") {\n                  score -= SEGMENT_POINTS + SPLAT_PENALTY;\n              } else {\n                  score += STATIC_POINTS;\n              }\n\n              return score;\n          }, 0);\n\n    return { route, score, index };\n};\n/**\n * Give a score to all routes and sort them on that\n * If two routes have the exact same score, we go by index instead\n * @param {object[]} routes\n * @return {object[]}\n */\nconst rankRoutes = (routes) =>\n    routes\n        .map(rankRoute)\n        .sort((a, b) =>\n            a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index\n        );\n/**\n * Ranks and picks the best route to match. Each segment gets the highest\n * amount of points, then the type of segment gets an additional amount of\n * points where\n *\n *  static > dynamic > splat > root\n *\n * This way we don't have to worry about the order of our routes, let the\n * computers do it.\n *\n * A route looks like this\n *\n *  { path, default, value }\n *\n * And a returned match looks like:\n *\n *  { route, params, uri }\n *\n * @param {object[]} routes\n * @param {string} uri\n * @return {?object}\n */\nconst pick = (routes, uri) => {\n    let match;\n    let default_;\n\n    const [uriPathname] = uri.split(\"?\");\n    const uriSegments = segmentize(uriPathname);\n    const isRootUri = uriSegments[0] === \"\";\n    const ranked = rankRoutes(routes);\n\n    for (let i = 0, l = ranked.length; i < l; i++) {\n        const route = ranked[i].route;\n        let missed = false;\n\n        if (route.default) {\n            default_ = {\n                route,\n                params: {},\n                uri,\n            };\n            continue;\n        }\n\n        const routeSegments = segmentize(route.path);\n        const params = {};\n        const max = Math.max(uriSegments.length, routeSegments.length);\n        let index = 0;\n\n        for (; index < max; index++) {\n            const routeSegment = routeSegments[index];\n            const uriSegment = uriSegments[index];\n\n            if (routeSegment && routeSegment[0] === \"*\") {\n                // Hit a splat, just grab the rest, and return a match\n                // uri:   /files/documents/work\n                // route: /files/* or /files/*splatname\n                const splatName =\n                    routeSegment === \"*\" ? \"*\" : routeSegment.slice(1);\n\n                params[splatName] = uriSegments\n                    .slice(index)\n                    .map(decodeURIComponent)\n                    .join(\"/\");\n                break;\n            }\n\n            if (typeof uriSegment === \"undefined\") {\n                // URI is shorter than the route, no match\n                // uri:   /users\n                // route: /users/:userId\n                missed = true;\n                break;\n            }\n\n            const dynamicMatch = PARAM.exec(routeSegment);\n\n            if (dynamicMatch && !isRootUri) {\n                const value = decodeURIComponent(uriSegment);\n                params[dynamicMatch[1]] = value;\n            } else if (routeSegment !== uriSegment) {\n                // Current segments don't match, not dynamic, not splat, so no match\n                // uri:   /users/123/settings\n                // route: /users/:id/profile\n                missed = true;\n                break;\n            }\n        }\n\n        if (!missed) {\n            match = {\n                route,\n                params,\n                uri: \"/\" + uriSegments.slice(0, index).join(\"/\"),\n            };\n            break;\n        }\n    }\n\n    return match || default_ || null;\n};\n/**\n * Add the query to the pathname if a query is given\n * @param {string} pathname\n * @param {string} [query]\n * @return {string}\n */\nconst addQuery = (pathname, query) => pathname + (query ? `?${query}` : \"\");\n/**\n * Resolve URIs as though every path is a directory, no files. Relative URIs\n * in the browser can feel awkward because not only can you be \"in a directory\",\n * you can be \"at a file\", too. For example:\n *\n *  browserSpecResolve('foo', '/bar/') => /bar/foo\n *  browserSpecResolve('foo', '/bar') => /foo\n *\n * But on the command line of a file system, it's not as complicated. You can't\n * `cd` from a file, only directories. This way, links have to know less about\n * their current path. To go deeper you can do this:\n *\n *  <Link to=\"deeper\"/>\n *  // instead of\n *  <Link to=`{${props.uri}/deeper}`/>\n *\n * Just like `cd`, if you want to go deeper from the command line, you do this:\n *\n *  cd deeper\n *  # not\n *  cd $(pwd)/deeper\n *\n * By treating every path as a directory, linking to relative paths should\n * require less contextual information and (fingers crossed) be more intuitive.\n * @param {string} to\n * @param {string} base\n * @return {string}\n */\nconst resolve = (to, base) => {\n    // /foo/bar, /baz/qux => /foo/bar\n    if (to.startsWith(\"/\")) return to;\n\n    const [toPathname, toQuery] = to.split(\"?\");\n    const [basePathname] = base.split(\"?\");\n    const toSegments = segmentize(toPathname);\n    const baseSegments = segmentize(basePathname);\n\n    // ?a=b, /users?b=c => /users?a=b\n    if (toSegments[0] === \"\") return addQuery(basePathname, toQuery);\n\n    // profile, /users/789 => /users/789/profile\n\n    if (!toSegments[0].startsWith(\".\")) {\n        const pathname = baseSegments.concat(toSegments).join(\"/\");\n        return addQuery((basePathname === \"/\" ? \"\" : \"/\") + pathname, toQuery);\n    }\n\n    // ./       , /users/123 => /users/123\n    // ../      , /users/123 => /users\n    // ../..    , /users/123 => /\n    // ../../one, /a/b/c/d   => /a/b/one\n    // .././one , /a/b/c/d   => /a/b/c/one\n    const allSegments = baseSegments.concat(toSegments);\n    const segments = [];\n\n    allSegments.forEach((segment) => {\n        if (segment === \"..\") segments.pop();\n        else if (segment !== \".\") segments.push(segment);\n    });\n\n    return addQuery(\"/\" + segments.join(\"/\"), toQuery);\n};\n/**\n * Combines the `basepath` and the `path` into one path.\n * @param {string} basepath\n * @param {string} path\n */\nconst combinePaths = (basepath, path) =>\n    `${stripSlashes(\n        path === \"/\"\n            ? basepath\n            : `${stripSlashes(basepath)}/${stripSlashes(path)}`\n    )}/`;\n/**\n * Decides whether a given `event` should result in a navigation or not.\n * @param {object} event\n */\nconst shouldNavigate = (event) =>\n    !event.defaultPrevented &&\n    event.button === 0 &&\n    !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n\n// svelte seems to kill anchor.host value in ie11, so fall back to checking href\nconst hostMatches = (anchor) => {\n    const host = location.host;\n    return (\n        anchor.host === host ||\n        anchor.href.indexOf(`https://${host}`) === 0 ||\n        anchor.href.indexOf(`http://${host}`) === 0\n    );\n};\n\nconst canUseDOM = () =>\n    typeof window !== \"undefined\" &&\n    \"document\" in window &&\n    \"location\" in window;\n\nexport {\n    stripSlashes,\n    pick,\n    resolve,\n    combinePaths,\n    shouldNavigate,\n    hostMatches,\n    canUseDOM,\n};\n","/**\n * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js\n * https://github.com/reach/router/blob/master/LICENSE\n */\nimport { canUseDOM } from \"./utils\";\n\nconst getLocation = (source) => {\n    return {\n        ...source.location,\n        state: source.history.state,\n        key: (source.history.state && source.history.state.key) || \"initial\",\n    };\n};\nconst createHistory = (source) => {\n    const listeners = [];\n    let location = getLocation(source);\n\n    return {\n        get location() {\n            return location;\n        },\n\n        listen(listener) {\n            listeners.push(listener);\n\n            const popstateListener = () => {\n                location = getLocation(source);\n                listener({ location, action: \"POP\" });\n            };\n\n            source.addEventListener(\"popstate\", popstateListener);\n\n            return () => {\n                source.removeEventListener(\"popstate\", popstateListener);\n                const index = listeners.indexOf(listener);\n                listeners.splice(index, 1);\n            };\n        },\n\n        navigate(to, { state, replace = false, preserveScroll = false, blurActiveElement = true } = {}) {\n            state = { ...state, key: Date.now() + \"\" };\n            // try...catch iOS Safari limits to 100 pushState calls\n            try {\n                if (replace) source.history.replaceState(state, \"\", to);\n                else source.history.pushState(state, \"\", to);\n            } catch (e) {\n                source.location[replace ? \"replace\" : \"assign\"](to);\n            }\n            location = getLocation(source);\n            listeners.forEach((listener) =>\n                listener({ location, action: \"PUSH\", preserveScroll })\n            );\n            if(blurActiveElement) document.activeElement.blur();\n        },\n    };\n};\n// Stores history entries in memory for testing or other platforms like Native\nconst createMemorySource = (initialPathname = \"/\") => {\n    let index = 0;\n    const stack = [{ pathname: initialPathname, search: \"\" }];\n    const states = [];\n\n    return {\n        get location() {\n            return stack[index];\n        },\n        addEventListener(name, fn) {},\n        removeEventListener(name, fn) {},\n        history: {\n            get entries() {\n                return stack;\n            },\n            get index() {\n                return index;\n            },\n            get state() {\n                return states[index];\n            },\n            pushState(state, _, uri) {\n                const [pathname, search = \"\"] = uri.split(\"?\");\n                index++;\n                stack.push({ pathname, search });\n                states.push(state);\n            },\n            replaceState(state, _, uri) {\n                const [pathname, search = \"\"] = uri.split(\"?\");\n                stack[index] = { pathname, search };\n                states[index] = state;\n            },\n        },\n    };\n};\n// Global history uses window.history as the source if available,\n// otherwise a memory history\nconst globalHistory = createHistory(\n    canUseDOM() ? window : createMemorySource()\n);\nconst { navigate } = globalHistory;\n\nexport { globalHistory, navigate, createHistory, createMemorySource };\n","/*\n    Backbone-like model interface\n    Implements the following:\n    - Model.set(key, value) - sets the value of the key\n    - Model.get(key) - gets the value of the key\n    - Model.on(event, callback) - listens to the event\n    \n    A shorter/worse version of\n    https://github.com/manzt/anywidget/blob/b4557b3ef9d8727337acba36ec5b68d6cbc37990/packages/deno/src/mod.ts#L159\n*/\n\nlet idCounter = 0;\nconst uniqueId = (prefix) => (prefix ?? '') + ++idCounter;\n\n\nconst deepcopy = (data) => JSON.parse(JSON.stringify(data));\nexport const Model = (attributes) => ({\n    _state: attributes,\n    _target: new EventTarget(),\n    cid: uniqueId(\"model\"),\n    set: function (key, value) {\n        const previous = deepcopy(this._state[key]);\n        this._state[key] = value;\n        this._target.dispatchEvent(new CustomEvent(\"change\", {\n            detail: {\n                data: deepcopy(this._state),\n                previous,\n                changed: { [key]: value }\n            }\n        }));\n    },\n    get: function (key) {\n        return this._state[key];\n    },\n    on: function (event, callback) {\n        this._target.addEventListener(event, callback);\n    },\n})","<script>\n\timport { onMount } from 'svelte';\n\timport { writable } from 'svelte/store';\n\timport { Model } from '../model';\n\n\texport let task;\n\texport let components;\n\texport let componentData;\n\texport let dirty;\n\n\tlet container;\n\n\t// For now, I'm just taking these from anywidget (this whole multi-step\n\t// translation to/from anywidget could probably be more elegant)\n\t/**\n\t * @param {string} str\n\t * @returns {str is \"https://${string}\" | \"http://${string}\"}\n\t */\n\tfunction is_href(str) {\n\t\treturn str.startsWith('http://') || str.startsWith('https://');\n\t}\n\n\t/**\n\t * @param {string} href\n\t * @param {string} anywidget_id\n\t * @returns {Promise<void>}\n\t */\n\tasync function load_css_href(href, anywidget_id) {\n\t\t/** @type {HTMLLinkElement | null} */\n\t\tlet prev = document.querySelector(`link[id='${anywidget_id}']`);\n\n\t\t// Adapted from https://github.com/vitejs/vite/blob/d59e1acc2efc0307488364e9f2fad528ec57f204/packages/vite/src/client/client.ts#L185-L201\n\t\t// Swaps out old styles with new, but avoids flash of unstyled content.\n\t\t// No need to await the load since we already have styles applied.\n\t\tif (prev) {\n\t\t\tlet newLink = /** @type {HTMLLinkElement} */ (prev.cloneNode());\n\t\t\tnewLink.href = href;\n\t\t\tnewLink.addEventListener('load', () => prev?.remove());\n\t\t\tnewLink.addEventListener('error', () => prev?.remove());\n\t\t\tprev.after(newLink);\n\t\t\treturn;\n\t\t}\n\n\t\treturn new Promise((resolve) => {\n\t\t\tlet link = Object.assign(document.createElement('link'), {\n\t\t\t\trel: 'stylesheet',\n\t\t\t\thref,\n\t\t\t\tonload: resolve\n\t\t\t});\n\t\t\tdocument.head.appendChild(link);\n\t\t});\n\t}\n\n\t/**\n\t * @param {string} css_text\n\t * @param {string} anywidget_id\n\t * @returns {void}\n\t */\n\tfunction load_css_text(css_text, anywidget_id) {\n\t\t/** @type {HTMLStyleElement | null} */\n\t\tlet prev = document.querySelector(`style[id='${anywidget_id}']`);\n\t\tif (prev) {\n\t\t\t// replace instead of creating a new DOM node\n\t\t\tprev.textContent = css_text;\n\t\t\treturn;\n\t\t}\n\t\tlet style = Object.assign(document.createElement('style'), {\n\t\t\tid: anywidget_id,\n\t\t\ttype: 'text/css'\n\t\t});\n\t\tstyle.appendChild(document.createTextNode(css_text));\n\t\tdocument.head.appendChild(style);\n\t}\n\n\t/**\n\t * @param {string | undefined} css\n\t * @param {string} anywidget_id\n\t * @returns {Promise<void>}\n\t */\n\tasync function load_css(css, anywidget_id) {\n\t\tif (!css || !anywidget_id) return;\n\t\tif (is_href(css)) return load_css_href(css, anywidget_id);\n\t\treturn load_css_text(css, anywidget_id);\n\t}\n\n\t/**\n\t * @param {string} esm\n\t * @returns {Promise<{ module: any, url: string }>}\n\t */\n\tasync function load_esm(esm) {\n\t\tif (is_href(esm)) {\n\t\t\treturn {\n\t\t\t\tmodule: await import(/* webpackIgnore: true */ esm),\n\t\t\t\turl: esm\n\t\t\t};\n\t\t}\n\t\tlet url = URL.createObjectURL(new Blob([esm], { type: 'text/javascript' }));\n\t\tlet module = await import(/* webpackIgnore: true */ url);\n\t\tURL.revokeObjectURL(url);\n\t\treturn { module: module.default, url };\n\t}\n\n\tconst destroyFunctions = [];\n\n\tconst load_all_esm = async (components) => {\n\t\treturn Object.fromEntries(\n\t\t\tawait Promise.all(\n\t\t\t\tObject.values(components).map(async ({ name, esm }) => {\n\t\t\t\t\tconst output = await load_esm(esm);\n\t\t\t\t\treturn [name, output];\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t};\n\n\tconst load_components = async (components) => {\n\t\tObject.entries(components).forEach(([name, { css }]) => {\n\t\t\tload_css(css, name);\n\t\t});\n\t\treturn load_all_esm(components);\n\t};\n\n\tconst renderTask = async () => {\n\t\tcontainer.innerHTML = '';\n\t\tconst esm_modules = await load_components(components);\n\t\tObject.entries(task).forEach(([field, { name, css, props }]) => {\n\t\t\tconst { module } = esm_modules[name];\n\t\t\tconst { render } = module;\n\n\t\t\tconst componentContainer = document.createElement('div');\n\t\t\tcontainer.appendChild(componentContainer);\n\t\t\tprops = props || {};\n\t\t\tconst fieldAnnotation = componentData[field].annotation;\n\t\t\tconst fieldDatum = componentData[field].datum;\n\n\t\t\tconst model = Model({\n\t\t\t\tdatum: fieldDatum,\n\t\t\t\tannotation: fieldAnnotation,\n\t\t\t\tprops\n\t\t\t});\n\t\t\tmodel.on('change', ({ detail }) => {\n\t\t\t\tconst { data } = detail;\n\t\t\t\tif (componentData[field].annotation === data['annotation']) return;\n\t\t\t\tcomponentData[field].annotation = data['annotation'];\n\t\t\t\tdirty = true;\n\t\t\t});\n\t\t\tconst destroy = render({\n\t\t\t\tel: componentContainer,\n\t\t\t\tmodel\n\t\t\t});\n\t\t\tif (destroy) destroyFunctions.push(destroy);\n\t\t});\n\t};\n\n\tonMount(() => {\n\t\trenderTask();\n\t\treturn () => {\n\t\t\tdestroyFunctions.forEach((destroy) => destroy());\n\t\t};\n\t});\n</script>\n\n<div class=\"container min-h-96 p-5\" bind:this={container}></div>\n","<script>\n\timport Protected from '../components/Protected.svelte';\n\timport Task from '../components/task.svelte';\n\texport let datum;\n\texport let postAssignment;\n\texport let next;\n\texport let prev;\n\n\texport let assignment;\n\texport let components;\n\texport let task;\n\n\t$: componentData = assignment.components;\n\t$: annotation = compileComponentAnnotations(componentData);\n\tlet dirty = false;\n\n\tlet lastSaved;\n\n\tconst compileComponentAnnotations = (componentData) => {\n\t\tif (!componentData) return {};\n\t\treturn Object.fromEntries(\n\t\t\tObject.entries(componentData).map(([componentName, { annotation }]) => {\n\t\t\t\treturn [componentName, JSON.stringify(annotation)];\n\t\t\t})\n\t\t);\n\t};\n\n\t// TODO: refactor the keyboard shortcuts\n\tconst handleKeys = (e) => {\n\t\tif (e.key === 'Enter' && !e.ctrlKey && !e.metaKey) {\n\t\t\te.preventDefault();\n\t\t\tif (assignment.is_complete) return handleNext();\n\t\t\thandleComplete();\n\t\t}\n\t\tif (e.key === 'ArrowRight' && !e.ctrlKey && !e.metaKey) {\n\t\t\te.preventDefault();\n\t\t\thandleNext();\n\t\t}\n\t\tif (e.key === 'ArrowDown' && !e.ctrlKey && !e.metaKey) {\n\t\t\te.preventDefault();\n\t\t\thandleSkip();\n\t\t}\n\t\tif (e.key === 'ArrowLeft' && !e.ctrlKey && !e.metaKey) {\n\t\t\te.preventDefault();\n\t\t\thandlePrev();\n\t\t}\n\t};\n\n\tconst post = async (annotation, is_complete = false, is_skipped = false) => {\n\t\tif (!annotation) return;\n\t\tconsole.log(\"POST\", annotation, is_complete, is_skipped)\n\t\tconst response = await postAssignment(\n\t\t\tannotation,\n\t\t\tdatum,\n\t\t\tis_complete || (!dirty && assignment.is_complete),\n\t\t\tis_skipped\n\t\t);\n\t\tassignment = response;\n\t\tannotation = assignment.annotation;\n\t\tlastSaved = new Date().toLocaleString();\n\t};\n\n\tconst handleComplete = async () => {\n\t\tconsole.log(\"EXCUSE ME????\")\n\t\tconsole.log(annotation, dirty)\n\t\tawait post(annotation, true, false);\n\t\tdirty = false;\n\t};\n\tconst handleSubmit = async () => {\n\t\tconsole.log(\"EXCUSE ME??\")\n\t\tawait handleComplete();\n\t\tawait handleNext();\n\t};\n\tconst handleNext = async () => {\n\t\tawait post(annotation, assignment.is_complete, assignment.is_skipped);\n\t\treturn next(assignment);\n\t};\n\tconst handleSkip = async () => {\n\t\t// when skipping, mark as incomplete even if it was marked as complete\n\t\tdirty = true;\n\t\tawait post(annotation, false, true);\n\t};\n\tconst handlePrev = async () => {\n\t\tawait post(annotation, assignment.is_complete, assignment.is_skipped);\n\t\treturn prev(assignment);\n\t};\n\n\t// This constantly saves the annotation, which prevents lost work\n\t// BUT complicates the logic for is_complete\n\t// We just save when the user presses one of the buttons instead for now\n\t// $: postAssignment(annotation);\n\tconsole.log(\"ANNOTATE WhEE\")\n\tconsole.log(\"A\", assignment)\n\tconsole.log(\"A\", task)\n\tconsole.log(\"A\", components)\n\tconsole.log(\"A\", componentData)\n</script>\n\n<svelte:window on:keydown={handleKeys} />\n\n<main class=\"p-5\">\n\t{#if assignment.is_complete}\n\t\t<div class=\"bg-green-300 p-3\">\n\t\t\t<h1>Marked as complete.</h1>\n\t\t</div>\n\t{:else if assignment.is_skipped}\n\t\t<div class=\"bg-red-300 p-3\">\n\t\t\t<h1>Marked as skipped.</h1>\n\t\t</div>\n\t{:else}\n\t\t<div class=\"bg-gray-100 p-3 text-gray-400\">\n\t\t\t<h1>Not yet marked as complete. Press submit to mark as complete.</h1>\n\t\t</div>\n\t{/if}\n\t<Task {task} components={components} bind:componentData bind:dirty />\n\t<div class=\"info text-sm text-gray-300 flex my-8\">\n\t\t<span>{lastSaved ? `Last saved ${lastSaved}.` : ''}</span>\n\t\t<div class=\"flex-1\"></div>\n\t\t<span class=\"flex-none\"><a href=\"/annotate/{datum}\">@{datum}</a></span>\n\t</div>\n\t<div class=\"actions mx-auto max-w-fit\">\n\t\t<button class=\"btn btn-lg mx-4\" on:click={handlePrev} disabled={assignment.prev === null}\n\t\t\t>Prev</button\n\t\t>\n\t\t<button class=\"btn btn-lg mx-4 btn-success\" on:click={handleSubmit}>Submit</button>\n\t\t<button class=\"btn btn-lg mx-4 btn-error\" on:click={handleSkip}>Skip</button>\n\t</div>\n</main>\n\n<!-- <button>Bookmark</button> -->\n\n<style>\n\t.actions {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t}\n</style>\n","import \"./app.css\"\nimport Annotate from \"./lib/pages/annotate.svelte\"\n\n\n// This also feels pretty janky -- probably worth thinking about whether this\n// approach is the best way to handle this.\n// Especially bc custom events are the dispreferred way to communicate between\n// JS and Python:\n// https://anywidget.dev/en/jupyter-widgets-the-good-parts/#2-custom-messages:~:text=Prefer%20Traitlets%20over%20custom%20messages%20for%20state%20synchronization\nfunction eventToPromise(model, object_name) {\n    return new Promise((resolve, reject) => {\n        const listener = ({ name, data }) => {\n            resolve(model.get(object_name));\n            model.off(name, listener)\n        }\n\n        model.on(`on:${object_name}`, listener)\n        setTimeout(() => reject(new Error(\"Timeout\")), 2000)\n    })\n}\n\n\n\nexport default ({\n    render: ({ model, el }) => {\n        const datum = model.get('datum')\n        const { task, components } = model.get('task')\n        const assignment = model.get('assignment')\n\n        model.on(\"change:datum\", () => {\n            component.$set({ datum: model.get('datum') })\n        })\n        model.on(\"change:assignment\", () => {\n            component.$set({ assignment: model.get('assignment') })\n        })\n        model.on(\"change:task\", () => {\n            const { task, components } = model.get('task')\n            component.$set({ task, components })\n        })\n\n        const postAssignment = async (annotation, datum, is_complete = false, is_skipped = false) => {\n            model.set(\"result\", {\n                annotation, is_complete, is_skipped\n            })\n            model.save_changes();\n            return eventToPromise(model, \"change:assignment\")\n        }\n\n        const next = async () => {\n            model.set(\"datum\", datum + 1)\n        }\n\n        const prev = async () => {\n            model.send({ event: 'prev' })\n        }\n\n        let component = new Annotate({\n            target: el, props: {\n                datum,\n                task,\n                components,\n                assignment,\n                postAssignment,\n                prev,\n                next,\n            }\n        })\n        return () => {\n            component.$destroy()\n        }\n    }\n})"],"names":["noop","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","b","is_empty","obj","append","target","node","insert","anchor","detach","element","name","text","data","space","listen","event","handler","options","attr","attribute","value","children","set_data","current_component","set_current_component","component","get_current_component","onMount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","add_render_callback","add_flush_callback","seen_callbacks","flushidx","saved_component","update","i","callback","$$","dirty","flush_render_callbacks","filtered","targets","c","outroing","outros","transition_in","block","local","transition_out","bind","index","create_component","mount_component","fragment","after_update","new_on_destroy","destroy_component","detaching","make_dirty","init","instance","create_fragment","not_equal","props","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","__publicField","type","callbacks","PUBLIC_VERSION","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","subscribe","invalidate","initialToken","e","authToken","canUseDOM","getLocation","source","createHistory","listeners","location","listener","popstateListener","to","state","replace","preserveScroll","blurActiveElement","createMemorySource","initialPathname","stack","states","_","uri","pathname","search","idCounter","uniqueId","prefix","deepcopy","Model","attributes","key","previous","div","is_href","str","load_css_href","href","anywidget_id","prev","newLink","resolve","link","load_css_text","css_text","style","load_css","css","load_esm","esm","url","module","task","$$props","components","componentData","container","destroyFunctions","load_all_esm","output","load_components","renderTask","esm_modules","field","render","componentContainer","fieldAnnotation","fieldDatum","model","detail","$$invalidate","destroy","$$value","ctx","create_if_block","create_if_block_1","main","div1","span0","div0","span1","div2","button0","button1","button2","t2","t2_value","datum","postAssignment","next","assignment","lastSaved","compileComponentAnnotations","componentName","annotation","handleKeys","handleNext","handleComplete","handleSkip","handlePrev","post","is_complete","is_skipped","response","handleSubmit","eventToPromise","object_name","reject","jupyter","el","Annotate"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,10,11]}